part of '../kubernetes.dart';

String _getHeader(Object body) {
  return 'application/json; charset=utf-8';
}

/// Patch type.
enum PatchType {
  ///
  jsonPatch,

  ///
  mergePatch,

  ///
  strategicMergePatch,

  ///
  applyPatch,
}

/// Kubernetes client.
class KubernetesClient {
  /// The default constructor.
  KubernetesClient({
    required this.serverUrl,
    required this.accessToken,
    http.Client? httpClient,
  })  : assert(!serverUrl.endsWith('/'), 'Server url must not end with \'/\''),
        _httpClient = httpClient ?? http.Client();

  /// The JWT to authorize to the server.
  final String accessToken;

  /// Url of the cluster control-plane.
  final String serverUrl;
  final http.Client _httpClient;

  Future<Map<String, dynamic>> _getJsonMap(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $accessToken'};

    final resp = await _httpClient.get(Uri.parse(fullurl), headers: headers);
    final body = utf8.decode(resp.bodyBytes);
    final map = json.decode(body) as Map<String, dynamic>;
    return map;
  }

  Future<String> _getJsonString(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $accessToken'};

    final resp = await _httpClient.get(Uri.parse(fullurl), headers: headers);
    return resp.body;
  }

  Future<Map<String, dynamic>> _postJsonMap(String url, Object body) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $accessToken'};
    headers['Content-Type'] = _getHeader(body);

    final resp = await _httpClient.post(Uri.parse(fullurl),
        body: body, headers: headers);
    final map = json.decode(resp.body) as Map<String, dynamic>;
    return map;
  }

  Future<String> _postJsonString(String url, Object body) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $accessToken'};
    headers['Content-Type'] = _getHeader(body);

    final resp = await _httpClient.post(Uri.parse(fullurl),
        body: body, headers: headers);
    return resp.body;
  }

  Future<Map<String, dynamic>> _putJsonMap(String url, Object body) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $accessToken'};
    headers['Content-Type'] = _getHeader(body);

    final resp =
        await _httpClient.put(Uri.parse(fullurl), body: body, headers: headers);
    final map = json.decode(resp.body) as Map<String, dynamic>;
    return map;
  }

  Future<String> _putJsonString(String url, Object body) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $accessToken'};
    headers['Content-Type'] = _getHeader(body);

    final resp =
        await _httpClient.put(Uri.parse(fullurl), body: body, headers: headers);
    return resp.body;
  }

  Future<Map<String, dynamic>> _deleteJsonMap(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $accessToken'};

    final resp = await _httpClient.delete(Uri.parse(fullurl), headers: headers);
    final map = json.decode(resp.body) as Map<String, dynamic>;
    return map;
  }

  Future<String> _deleteJsonString(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $accessToken'};

    final resp = await _httpClient.delete(Uri.parse(fullurl), headers: headers);
    return resp.body;
  }

  Future<Map<String, dynamic>> _patchJsonMap(
      String url, Object body, PatchType patchType) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $accessToken'};
    headers['Content-Type'] = _getPatchHeader(patchType);

    final resp = await _httpClient.patch(Uri.parse(fullurl),
        body: body, headers: headers);
    final map = json.decode(resp.body) as Map<String, dynamic>;
    return map;
  }

  Future<String> _patchJsonString(
      String url, Object body, PatchType patchType) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $accessToken'};
    headers['Content-Type'] = _getPatchHeader(patchType);

    final resp = await _httpClient.patch(Uri.parse(fullurl),
        body: body, headers: headers);
    return resp.body;
  }

  Future<String> _optionsJsonString(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $accessToken'};

    final request = http.Request('options', Uri.parse(fullurl));
    request.headers.addAll(headers);

    final resp = await _httpClient.send(request);
    return resp.stream.bytesToString();
  }

  Future<String> _headJsonString(String url) async {
    final fullurl = _getFullUrl(url);
    final headers = <String, String>{'Authorization': 'Bearer $accessToken'};

    final resp = await _httpClient.head(Uri.parse(fullurl), headers: headers);
    return resp.body;
  }

  String _joinQueryStrings(Map<String, Object> q) {
    return q.entries.map((e) => '${e.key}=${e.value}').join('&');
  }

  String _getFullUrl(String url) {
    return '$serverUrl$url';
  }

  /// List or watch objects of kind [istio_v1beta1.Gateway].
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<istio_v1beta1.GatewayList> listIstioV1beta1NamespacedGateway({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.istio.io/v1beta1/namespaces/$namespace/gateways$query');
    return istio_v1beta1.GatewayList.fromJson(result);
  }

  /// List or watch objects of kind [istio_v1beta1.VirtualService].
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<istio_v1beta1.VirtualServiceList>
      listIstioV1beta1NamespacedVirtualService({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.istio.io/v1beta1/namespaces/$namespace/virtualservices$query');
    return istio_v1beta1.VirtualServiceList.fromJson(result);
  }

  /// Get service account issuer OpenID configuration, also known as the 'OIDC discovery doc'.
  Future<String> getServiceAccountIssuerOpenIDConfiguration() async {
    final result = await _getJsonString('/.well-known/openid-configuration/');
    return result;
  }

  /// Get available API versions.
  Future<apimachinery_pkg_apis_meta_v1.APIVersions> getCoreAPIVersions() async {
    final result = await _getJsonMap('/api/');
    return apimachinery_pkg_apis_meta_v1.APIVersions.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getCoreV1APIResources() async {
    final result = await _getJsonMap('/api/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List objects of kind ComponentStatus.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.ComponentStatusList> listCoreV1ComponentStatus({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/componentstatuses$query');
    return api_core_v1.ComponentStatusList.fromJson(result);
  }

  /// Read the specified ComponentStatus.
  ///
  /// [name] Name of the ComponentStatus.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ComponentStatus> readCoreV1ComponentStatus({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/componentstatuses/$name$query');
    return api_core_v1.ComponentStatus.fromJson(result);
  }

  /// List or watch objects of kind ConfigMap.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.ConfigMapList> listCoreV1ConfigMapForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/configmaps$query');
    return api_core_v1.ConfigMapList.fromJson(result);
  }

  /// List or watch objects of kind Endpoints.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.EndpointsList> listCoreV1EndpointsForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/endpoints$query');
    return api_core_v1.EndpointsList.fromJson(result);
  }

  /// List or watch objects of kind Event.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.EventList> listCoreV1EventForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/events$query');
    return api_core_v1.EventList.fromJson(result);
  }

  /// List or watch objects of kind LimitRange.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.LimitRangeList> listCoreV1LimitRangeForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/limitranges$query');
    return api_core_v1.LimitRangeList.fromJson(result);
  }

  /// List or watch objects of kind Namespace.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.NamespaceList> listCoreV1Namespace({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/namespaces$query');
    return api_core_v1.NamespaceList.fromJson(result);
  }

  /// Create a Namespace.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> createCoreV1Namespace({
    required api_core_v1.Namespace body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap('/api/v1/namespaces$query', jsonBody);
    return api_core_v1.Namespace.fromJson(result);
  }

  /// Create a Binding.
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed.
  ///
  /// [fieldManager] FieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [fieldValidation] FieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Binding> createCoreV1NamespacedBinding({
    required api_core_v1.Binding body,
    String? dryRun,
    String? fieldManager,
    String? fieldValidation,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (dryRun != null) {
      queryStrings['dryRun'] = dryRun;
    }
    if (fieldManager != null) {
      queryStrings['fieldManager'] = fieldManager;
    }
    if (fieldValidation != null) {
      queryStrings['fieldValidation'] = fieldValidation;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/bindings$query', jsonBody);
    return api_core_v1.Binding.fromJson(result);
  }

  /// List or watch objects of kind ConfigMap.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ConfigMapList> listCoreV1NamespacedConfigMap({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/configmaps$query');
    return api_core_v1.ConfigMapList.fromJson(result);
  }

  /// Delete collection of ConfigMap.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedConfigMap({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/api/v1/namespaces/$namespace/configmaps$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a ConfigMap.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ConfigMap> createCoreV1NamespacedConfigMap({
    required api_core_v1.ConfigMap body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/configmaps$query', jsonBody);
    return api_core_v1.ConfigMap.fromJson(result);
  }

  /// Read the specified ConfigMap.
  ///
  /// [name] Name of the ConfigMap.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ConfigMap> readCoreV1NamespacedConfigMap({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/configmaps/$name$query');
    return api_core_v1.ConfigMap.fromJson(result);
  }

  /// Delete a ConfigMap.
  ///
  /// [name] Name of the ConfigMap.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1NamespacedConfigMap({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/configmaps/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified ConfigMap.
  ///
  /// [name] Name of the ConfigMap.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ConfigMap> replaceCoreV1NamespacedConfigMap({
    required api_core_v1.ConfigMap body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/configmaps/$name$query', jsonBody);
    return api_core_v1.ConfigMap.fromJson(result);
  }

  /// Partially update the specified ConfigMap.
  ///
  /// [name] Name of the ConfigMap.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ConfigMap> patchCoreV1NamespacedConfigMap({
    required api_core_v1.ConfigMap body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/configmaps/$name$query',
        jsonBody,
        patchType);
    return api_core_v1.ConfigMap.fromJson(result);
  }

  /// List or watch objects of kind Endpoints.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.EndpointsList> listCoreV1NamespacedEndpoints({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/endpoints$query');
    return api_core_v1.EndpointsList.fromJson(result);
  }

  /// Delete collection of Endpoints.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedEndpoints({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/api/v1/namespaces/$namespace/endpoints$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create Endpoints.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Endpoints> createCoreV1NamespacedEndpoints({
    required api_core_v1.Endpoints body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/endpoints$query', jsonBody);
    return api_core_v1.Endpoints.fromJson(result);
  }

  /// Read the specified Endpoints.
  ///
  /// [name] Name of the Endpoints.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Endpoints> readCoreV1NamespacedEndpoints({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/endpoints/$name$query');
    return api_core_v1.Endpoints.fromJson(result);
  }

  /// Delete Endpoints.
  ///
  /// [name] Name of the Endpoints.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1NamespacedEndpoints({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/endpoints/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified Endpoints.
  ///
  /// [name] Name of the Endpoints.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Endpoints> replaceCoreV1NamespacedEndpoints({
    required api_core_v1.Endpoints body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/endpoints/$name$query', jsonBody);
    return api_core_v1.Endpoints.fromJson(result);
  }

  /// Partially update the specified Endpoints.
  ///
  /// [name] Name of the Endpoints.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Endpoints> patchCoreV1NamespacedEndpoints({
    required api_core_v1.Endpoints body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/endpoints/$name$query',
        jsonBody,
        patchType);
    return api_core_v1.Endpoints.fromJson(result);
  }

  /// List or watch objects of kind Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.EventList> listCoreV1NamespacedEvent({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/events$query');
    return api_core_v1.EventList.fromJson(result);
  }

  /// Delete collection of Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedEvent({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/api/v1/namespaces/$namespace/events$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create an Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Event> createCoreV1NamespacedEvent({
    required api_core_v1.Event body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/events$query', jsonBody);
    return api_core_v1.Event.fromJson(result);
  }

  /// Read the specified Event.
  ///
  /// [name] Name of the Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Event> readCoreV1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/events/$name$query');
    return api_core_v1.Event.fromJson(result);
  }

  /// Delete an Event.
  ///
  /// [name] Name of the Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/events/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified Event.
  ///
  /// [name] Name of the Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Event> replaceCoreV1NamespacedEvent({
    required api_core_v1.Event body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/events/$name$query', jsonBody);
    return api_core_v1.Event.fromJson(result);
  }

  /// Partially update the specified Event.
  ///
  /// [name] Name of the Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Event> patchCoreV1NamespacedEvent({
    required api_core_v1.Event body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/events/$name$query',
        jsonBody,
        patchType);
    return api_core_v1.Event.fromJson(result);
  }

  /// List or watch objects of kind LimitRange.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.LimitRangeList> listCoreV1NamespacedLimitRange({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/limitranges$query');
    return api_core_v1.LimitRangeList.fromJson(result);
  }

  /// Delete collection of LimitRange.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedLimitRange({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/api/v1/namespaces/$namespace/limitranges$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a LimitRange.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.LimitRange> createCoreV1NamespacedLimitRange({
    required api_core_v1.LimitRange body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/limitranges$query', jsonBody);
    return api_core_v1.LimitRange.fromJson(result);
  }

  /// Read the specified LimitRange.
  ///
  /// [name] Name of the LimitRange.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.LimitRange> readCoreV1NamespacedLimitRange({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/limitranges/$name$query');
    return api_core_v1.LimitRange.fromJson(result);
  }

  /// Delete a LimitRange.
  ///
  /// [name] Name of the LimitRange.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1NamespacedLimitRange({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/limitranges/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified LimitRange.
  ///
  /// [name] Name of the LimitRange.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.LimitRange> replaceCoreV1NamespacedLimitRange({
    required api_core_v1.LimitRange body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/limitranges/$name$query', jsonBody);
    return api_core_v1.LimitRange.fromJson(result);
  }

  /// Partially update the specified LimitRange.
  ///
  /// [name] Name of the LimitRange.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.LimitRange> patchCoreV1NamespacedLimitRange({
    required api_core_v1.LimitRange body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/limitranges/$name$query',
        jsonBody,
        patchType);
    return api_core_v1.LimitRange.fromJson(result);
  }

  /// List or watch objects of kind PersistentVolumeClaim.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaimList>
      listCoreV1NamespacedPersistentVolumeClaim({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims$query');
    return api_core_v1.PersistentVolumeClaimList.fromJson(result);
  }

  /// Delete collection of PersistentVolumeClaim.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedPersistentVolumeClaim({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a PersistentVolumeClaim.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      createCoreV1NamespacedPersistentVolumeClaim({
    required api_core_v1.PersistentVolumeClaim body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims$query', jsonBody);
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// Read the specified PersistentVolumeClaim.
  ///
  /// [name] Name of the PersistentVolumeClaim.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      readCoreV1NamespacedPersistentVolumeClaim({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name$query');
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// Delete a PersistentVolumeClaim.
  ///
  /// [name] Name of the PersistentVolumeClaim.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      deleteCoreV1NamespacedPersistentVolumeClaim({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name$query');
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// Replace the specified PersistentVolumeClaim.
  ///
  /// [name] Name of the PersistentVolumeClaim.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      replaceCoreV1NamespacedPersistentVolumeClaim({
    required api_core_v1.PersistentVolumeClaim body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name$query',
        jsonBody);
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// Partially update the specified PersistentVolumeClaim.
  ///
  /// [name] Name of the PersistentVolumeClaim.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      patchCoreV1NamespacedPersistentVolumeClaim({
    required api_core_v1.PersistentVolumeClaim body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name$query',
        jsonBody,
        patchType);
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// Read status of the specified PersistentVolumeClaim.
  ///
  /// [name] Name of the PersistentVolumeClaim.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      readCoreV1NamespacedPersistentVolumeClaimStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name/status$query');
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// Replace status of the specified PersistentVolumeClaim.
  ///
  /// [name] Name of the PersistentVolumeClaim.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      replaceCoreV1NamespacedPersistentVolumeClaimStatus({
    required api_core_v1.PersistentVolumeClaim body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name/status$query',
        jsonBody);
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// Partially update status of the specified PersistentVolumeClaim.
  ///
  /// [name] Name of the PersistentVolumeClaim.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeClaim>
      patchCoreV1NamespacedPersistentVolumeClaimStatus({
    required api_core_v1.PersistentVolumeClaim body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/persistentvolumeclaims/$name/status$query',
        jsonBody,
        patchType);
    return api_core_v1.PersistentVolumeClaim.fromJson(result);
  }

  /// List or watch objects of kind Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodList> listCoreV1NamespacedPod({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/pods$query');
    return api_core_v1.PodList.fromJson(result);
  }

  /// Delete collection of Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedPod({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/api/v1/namespaces/$namespace/pods$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> createCoreV1NamespacedPod({
    required api_core_v1.Pod body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/pods$query', jsonBody);
    return api_core_v1.Pod.fromJson(result);
  }

  /// Read the specified Pod.
  ///
  /// [name] Name of the Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> readCoreV1NamespacedPod({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/pods/$name$query');
    return api_core_v1.Pod.fromJson(result);
  }

  /// Delete a Pod.
  ///
  /// [name] Name of the Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> deleteCoreV1NamespacedPod({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/api/v1/namespaces/$namespace/pods/$name$query');
    return api_core_v1.Pod.fromJson(result);
  }

  /// Replace the specified Pod.
  ///
  /// [name] Name of the Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> replaceCoreV1NamespacedPod({
    required api_core_v1.Pod body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name$query', jsonBody);
    return api_core_v1.Pod.fromJson(result);
  }

  /// Partially update the specified Pod.
  ///
  /// [name] Name of the Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> patchCoreV1NamespacedPod({
    required api_core_v1.Pod body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name$query', jsonBody, patchType);
    return api_core_v1.Pod.fromJson(result);
  }

  /// Connect GET requests to attach of Pod.
  ///
  /// [container] The container in which to execute the command. Defaults to only container if there is only one container in the pod.
  ///
  /// [name] Name of the PodAttachOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [stderr] Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
  ///
  /// [stdin] Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
  ///
  /// [stdout] Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
  ///
  /// [tty] TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
  Future<String> connectCoreV1GetNamespacedPodAttach({
    String? container,
    required String name,
    required String namespace,
    bool? stderr,
    bool? stdin,
    bool? stdout,
    bool? tty,
  }) async {
    final queryStrings = <String, Object>{};
    if (container != null) {
      queryStrings['container'] = container;
    }
    if (stderr != null) {
      queryStrings['stderr'] = stderr;
    }
    if (stdin != null) {
      queryStrings['stdin'] = stdin;
    }
    if (stdout != null) {
      queryStrings['stdout'] = stdout;
    }
    if (tty != null) {
      queryStrings['tty'] = tty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/attach$query');
    return result;
  }

  /// Connect POST requests to attach of Pod.
  ///
  /// [container] The container in which to execute the command. Defaults to only container if there is only one container in the pod.
  ///
  /// [name] Name of the PodAttachOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [stderr] Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
  ///
  /// [stdin] Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
  ///
  /// [stdout] Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
  ///
  /// [tty] TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
  Future<String> connectCoreV1PostNamespacedPodAttach({
    required String body,
    String? container,
    required String name,
    required String namespace,
    bool? stderr,
    bool? stdin,
    bool? stdout,
    bool? tty,
  }) async {
    final queryStrings = <String, Object>{};
    if (container != null) {
      queryStrings['container'] = container;
    }
    if (stderr != null) {
      queryStrings['stderr'] = stderr;
    }
    if (stdin != null) {
      queryStrings['stdin'] = stdin;
    }
    if (stdout != null) {
      queryStrings['stdout'] = stdout;
    }
    if (tty != null) {
      queryStrings['tty'] = tty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/attach$query', body);
    return result;
  }

  /// Create binding of a Pod.
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed.
  ///
  /// [fieldManager] FieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [fieldValidation] FieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  ///
  /// [name] Name of the Binding.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Binding> createCoreV1NamespacedPodBinding({
    required api_core_v1.Binding body,
    String? dryRun,
    String? fieldManager,
    String? fieldValidation,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (dryRun != null) {
      queryStrings['dryRun'] = dryRun;
    }
    if (fieldManager != null) {
      queryStrings['fieldManager'] = fieldManager;
    }
    if (fieldValidation != null) {
      queryStrings['fieldValidation'] = fieldValidation;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/binding$query', jsonBody);
    return api_core_v1.Binding.fromJson(result);
  }

  /// Read ephemeralcontainers of the specified Pod.
  ///
  /// [name] Name of the Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> readCoreV1NamespacedPodEphemeralcontainers({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/ephemeralcontainers$query');
    return api_core_v1.Pod.fromJson(result);
  }

  /// Replace ephemeralcontainers of the specified Pod.
  ///
  /// [name] Name of the Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> replaceCoreV1NamespacedPodEphemeralcontainers({
    required api_core_v1.Pod body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/ephemeralcontainers$query',
        jsonBody);
    return api_core_v1.Pod.fromJson(result);
  }

  /// Partially update ephemeralcontainers of the specified Pod.
  ///
  /// [name] Name of the Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> patchCoreV1NamespacedPodEphemeralcontainers({
    required api_core_v1.Pod body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/ephemeralcontainers$query',
        jsonBody,
        patchType);
    return api_core_v1.Pod.fromJson(result);
  }

  /// Create eviction of a Pod.
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed.
  ///
  /// [fieldManager] FieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [fieldValidation] FieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  ///
  /// [name] Name of the Eviction.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.Eviction> createCoreV1NamespacedPodEviction({
    required api_policy_v1.Eviction body,
    String? dryRun,
    String? fieldManager,
    String? fieldValidation,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (dryRun != null) {
      queryStrings['dryRun'] = dryRun;
    }
    if (fieldManager != null) {
      queryStrings['fieldManager'] = fieldManager;
    }
    if (fieldValidation != null) {
      queryStrings['fieldValidation'] = fieldValidation;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/eviction$query', jsonBody);
    return api_policy_v1.Eviction.fromJson(result);
  }

  /// Connect GET requests to exec of Pod.
  ///
  /// [command] Command is the remote command to execute. argv array. Not executed within a shell.
  ///
  /// [container] Container in which to execute the command. Defaults to only container if there is only one container in the pod.
  ///
  /// [name] Name of the PodExecOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [stderr] Redirect the standard error stream of the pod for this call.
  ///
  /// [stdin] Redirect the standard input stream of the pod for this call. Defaults to false.
  ///
  /// [stdout] Redirect the standard output stream of the pod for this call.
  ///
  /// [tty] TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
  Future<String> connectCoreV1GetNamespacedPodExec({
    String? command,
    String? container,
    required String name,
    required String namespace,
    bool? stderr,
    bool? stdin,
    bool? stdout,
    bool? tty,
  }) async {
    final queryStrings = <String, Object>{};
    if (command != null) {
      queryStrings['command'] = command;
    }
    if (container != null) {
      queryStrings['container'] = container;
    }
    if (stderr != null) {
      queryStrings['stderr'] = stderr;
    }
    if (stdin != null) {
      queryStrings['stdin'] = stdin;
    }
    if (stdout != null) {
      queryStrings['stdout'] = stdout;
    }
    if (tty != null) {
      queryStrings['tty'] = tty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/exec$query');
    return result;
  }

  /// Connect POST requests to exec of Pod.
  ///
  /// [command] Command is the remote command to execute. argv array. Not executed within a shell.
  ///
  /// [container] Container in which to execute the command. Defaults to only container if there is only one container in the pod.
  ///
  /// [name] Name of the PodExecOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [stderr] Redirect the standard error stream of the pod for this call.
  ///
  /// [stdin] Redirect the standard input stream of the pod for this call. Defaults to false.
  ///
  /// [stdout] Redirect the standard output stream of the pod for this call.
  ///
  /// [tty] TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
  Future<String> connectCoreV1PostNamespacedPodExec({
    required String body,
    String? command,
    String? container,
    required String name,
    required String namespace,
    bool? stderr,
    bool? stdin,
    bool? stdout,
    bool? tty,
  }) async {
    final queryStrings = <String, Object>{};
    if (command != null) {
      queryStrings['command'] = command;
    }
    if (container != null) {
      queryStrings['container'] = container;
    }
    if (stderr != null) {
      queryStrings['stderr'] = stderr;
    }
    if (stdin != null) {
      queryStrings['stdin'] = stdin;
    }
    if (stdout != null) {
      queryStrings['stdout'] = stdout;
    }
    if (tty != null) {
      queryStrings['tty'] = tty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/exec$query', body);
    return result;
  }

  /// Read log of the specified Pod.
  ///
  /// [container] The container for which to stream logs. Defaults to only container if there is one container in the pod.
  ///
  /// [follow] Follow the log stream of the pod. Defaults to false.
  ///
  /// [insecureSkipTLSVerifyBackend] InsecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to. This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet. If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet).
  ///
  /// [limitBytes] If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
  ///
  /// [name] Name of the Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [previous] Return previous terminated container logs. Defaults to false.
  ///
  /// [sinceSeconds] A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
  ///
  /// [tailLines] If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime.
  ///
  /// [timestamps] If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
  Future<String> readCoreV1NamespacedPodLog({
    String? container,
    bool? follow,
    bool? insecureSkipTLSVerifyBackend,
    int? limitBytes,
    required String name,
    required String namespace,
    bool? pretty,
    bool? previous,
    int? sinceSeconds,
    int? tailLines,
    bool? timestamps,
  }) async {
    final queryStrings = <String, Object>{};
    if (container != null) {
      queryStrings['container'] = container;
    }
    if (follow != null) {
      queryStrings['follow'] = follow;
    }
    if (insecureSkipTLSVerifyBackend != null) {
      queryStrings['insecureSkipTLSVerifyBackend'] =
          insecureSkipTLSVerifyBackend;
    }
    if (limitBytes != null) {
      queryStrings['limitBytes'] = limitBytes;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (previous != null) {
      queryStrings['previous'] = previous;
    }
    if (sinceSeconds != null) {
      queryStrings['sinceSeconds'] = sinceSeconds;
    }
    if (tailLines != null) {
      queryStrings['tailLines'] = tailLines;
    }
    if (timestamps != null) {
      queryStrings['timestamps'] = timestamps;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/log$query');
    return result;
  }

  /// Connect GET requests to portforward of Pod.
  ///
  /// [name] Name of the PodPortForwardOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [ports] List of ports to forward Required when using WebSockets.
  Future<String> connectCoreV1GetNamespacedPodPortforward({
    required String name,
    required String namespace,
    int? ports,
  }) async {
    final queryStrings = <String, Object>{};
    if (ports != null) {
      queryStrings['ports'] = ports;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/portforward$query');
    return result;
  }

  /// Connect POST requests to portforward of Pod.
  ///
  /// [name] Name of the PodPortForwardOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [ports] List of ports to forward Required when using WebSockets.
  Future<String> connectCoreV1PostNamespacedPodPortforward({
    required String body,
    required String name,
    required String namespace,
    int? ports,
  }) async {
    final queryStrings = <String, Object>{};
    if (ports != null) {
      queryStrings['ports'] = ports;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/portforward$query', body);
    return result;
  }

  /// Connect GET requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1GetNamespacedPodProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy$query');
    return result;
  }

  /// Connect DELETE requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1DeleteNamespacedPodProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy$query');
    return result;
  }

  /// Connect POST requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1PostNamespacedPodProxy({
    required String body,
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy$query', body);
    return result;
  }

  /// Connect PUT requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1PutNamespacedPodProxy({
    required String body,
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _putJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy$query', body);
    return result;
  }

  /// Connect PATCH requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1PatchNamespacedPodProxy({
    required String body,
    required String name,
    required String namespace,
    String? pathQuery,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _patchJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy$query',
        body,
        patchType);
    return result;
  }

  /// Connect HEAD requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1HeadNamespacedPodProxy({
    required String body,
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _headJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy$query');
    return result;
  }

  /// Connect OPTIONS requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1OptionsNamespacedPodProxy({
    required String body,
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _optionsJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy$query');
    return result;
  }

  /// Connect GET requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1GetNamespacedPodProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path$query');
    return result;
  }

  /// Connect DELETE requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1DeleteNamespacedPodProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path$query');
    return result;
  }

  /// Connect POST requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1PostNamespacedPodProxyWithPath({
    required String body,
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path$query', body);
    return result;
  }

  /// Connect PUT requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1PutNamespacedPodProxyWithPath({
    required String body,
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _putJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path$query', body);
    return result;
  }

  /// Connect PATCH requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1PatchNamespacedPodProxyWithPath({
    required String body,
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _patchJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path$query',
        body,
        patchType);
    return result;
  }

  /// Connect HEAD requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1HeadNamespacedPodProxyWithPath({
    required String body,
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _headJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path$query');
    return result;
  }

  /// Connect OPTIONS requests to proxy of Pod.
  ///
  /// [name] Name of the PodProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to pod.
  Future<String> connectCoreV1OptionsNamespacedPodProxyWithPath({
    required String body,
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _optionsJsonString(
        '/api/v1/namespaces/$namespace/pods/$name/proxy/$path$query');
    return result;
  }

  /// Read status of the specified Pod.
  ///
  /// [name] Name of the Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> readCoreV1NamespacedPodStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/status$query');
    return api_core_v1.Pod.fromJson(result);
  }

  /// Replace status of the specified Pod.
  ///
  /// [name] Name of the Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> replaceCoreV1NamespacedPodStatus({
    required api_core_v1.Pod body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/status$query', jsonBody);
    return api_core_v1.Pod.fromJson(result);
  }

  /// Partially update status of the specified Pod.
  ///
  /// [name] Name of the Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Pod> patchCoreV1NamespacedPodStatus({
    required api_core_v1.Pod body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/pods/$name/status$query',
        jsonBody,
        patchType);
    return api_core_v1.Pod.fromJson(result);
  }

  /// List or watch objects of kind PodTemplate.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodTemplateList> listCoreV1NamespacedPodTemplate({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/podtemplates$query');
    return api_core_v1.PodTemplateList.fromJson(result);
  }

  /// Delete collection of PodTemplate.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedPodTemplate({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/podtemplates$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a PodTemplate.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodTemplate> createCoreV1NamespacedPodTemplate({
    required api_core_v1.PodTemplate body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/podtemplates$query', jsonBody);
    return api_core_v1.PodTemplate.fromJson(result);
  }

  /// Read the specified PodTemplate.
  ///
  /// [name] Name of the PodTemplate.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodTemplate> readCoreV1NamespacedPodTemplate({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/podtemplates/$name$query');
    return api_core_v1.PodTemplate.fromJson(result);
  }

  /// Delete a PodTemplate.
  ///
  /// [name] Name of the PodTemplate.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodTemplate> deleteCoreV1NamespacedPodTemplate({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/podtemplates/$name$query');
    return api_core_v1.PodTemplate.fromJson(result);
  }

  /// Replace the specified PodTemplate.
  ///
  /// [name] Name of the PodTemplate.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodTemplate> replaceCoreV1NamespacedPodTemplate({
    required api_core_v1.PodTemplate body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/podtemplates/$name$query', jsonBody);
    return api_core_v1.PodTemplate.fromJson(result);
  }

  /// Partially update the specified PodTemplate.
  ///
  /// [name] Name of the PodTemplate.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PodTemplate> patchCoreV1NamespacedPodTemplate({
    required api_core_v1.PodTemplate body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/podtemplates/$name$query',
        jsonBody,
        patchType);
    return api_core_v1.PodTemplate.fromJson(result);
  }

  /// List or watch objects of kind ReplicationController.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationControllerList>
      listCoreV1NamespacedReplicationController({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers$query');
    return api_core_v1.ReplicationControllerList.fromJson(result);
  }

  /// Delete collection of ReplicationController.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedReplicationController({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a ReplicationController.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      createCoreV1NamespacedReplicationController({
    required api_core_v1.ReplicationController body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers$query', jsonBody);
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// Read the specified ReplicationController.
  ///
  /// [name] Name of the ReplicationController.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      readCoreV1NamespacedReplicationController({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name$query');
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// Delete a ReplicationController.
  ///
  /// [name] Name of the ReplicationController.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1NamespacedReplicationController({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified ReplicationController.
  ///
  /// [name] Name of the ReplicationController.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      replaceCoreV1NamespacedReplicationController({
    required api_core_v1.ReplicationController body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name$query',
        jsonBody);
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// Partially update the specified ReplicationController.
  ///
  /// [name] Name of the ReplicationController.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      patchCoreV1NamespacedReplicationController({
    required api_core_v1.ReplicationController body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name$query',
        jsonBody,
        patchType);
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// Read scale of the specified ReplicationController.
  ///
  /// [name] Name of the Scale.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale>
      readCoreV1NamespacedReplicationControllerScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name/scale$query');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// Replace scale of the specified ReplicationController.
  ///
  /// [name] Name of the Scale.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale>
      replaceCoreV1NamespacedReplicationControllerScale({
    required api_autoscaling_v1.Scale body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name/scale$query',
        jsonBody);
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// Partially update scale of the specified ReplicationController.
  ///
  /// [name] Name of the Scale.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale>
      patchCoreV1NamespacedReplicationControllerScale({
    required api_autoscaling_v1.Scale body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name/scale$query',
        jsonBody,
        patchType);
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// Read status of the specified ReplicationController.
  ///
  /// [name] Name of the ReplicationController.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      readCoreV1NamespacedReplicationControllerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name/status$query');
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// Replace status of the specified ReplicationController.
  ///
  /// [name] Name of the ReplicationController.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      replaceCoreV1NamespacedReplicationControllerStatus({
    required api_core_v1.ReplicationController body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name/status$query',
        jsonBody);
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// Partially update status of the specified ReplicationController.
  ///
  /// [name] Name of the ReplicationController.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ReplicationController>
      patchCoreV1NamespacedReplicationControllerStatus({
    required api_core_v1.ReplicationController body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/replicationcontrollers/$name/status$query',
        jsonBody,
        patchType);
    return api_core_v1.ReplicationController.fromJson(result);
  }

  /// List or watch objects of kind ResourceQuota.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuotaList> listCoreV1NamespacedResourceQuota({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/resourcequotas$query');
    return api_core_v1.ResourceQuotaList.fromJson(result);
  }

  /// Delete collection of ResourceQuota.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedResourceQuota({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a ResourceQuota.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> createCoreV1NamespacedResourceQuota({
    required api_core_v1.ResourceQuota body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas$query', jsonBody);
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// Read the specified ResourceQuota.
  ///
  /// [name] Name of the ResourceQuota.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> readCoreV1NamespacedResourceQuota({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name$query');
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// Delete a ResourceQuota.
  ///
  /// [name] Name of the ResourceQuota.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> deleteCoreV1NamespacedResourceQuota({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name$query');
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// Replace the specified ResourceQuota.
  ///
  /// [name] Name of the ResourceQuota.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> replaceCoreV1NamespacedResourceQuota({
    required api_core_v1.ResourceQuota body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name$query', jsonBody);
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// Partially update the specified ResourceQuota.
  ///
  /// [name] Name of the ResourceQuota.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> patchCoreV1NamespacedResourceQuota({
    required api_core_v1.ResourceQuota body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name$query',
        jsonBody,
        patchType);
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// Read status of the specified ResourceQuota.
  ///
  /// [name] Name of the ResourceQuota.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> readCoreV1NamespacedResourceQuotaStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name/status$query');
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// Replace status of the specified ResourceQuota.
  ///
  /// [name] Name of the ResourceQuota.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> replaceCoreV1NamespacedResourceQuotaStatus({
    required api_core_v1.ResourceQuota body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name/status$query',
        jsonBody);
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// Partially update status of the specified ResourceQuota.
  ///
  /// [name] Name of the ResourceQuota.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ResourceQuota> patchCoreV1NamespacedResourceQuotaStatus({
    required api_core_v1.ResourceQuota body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/resourcequotas/$name/status$query',
        jsonBody,
        patchType);
    return api_core_v1.ResourceQuota.fromJson(result);
  }

  /// List or watch objects of kind Secret.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.SecretList> listCoreV1NamespacedSecret({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/secrets$query');
    return api_core_v1.SecretList.fromJson(result);
  }

  /// Delete collection of Secret.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedSecret({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/api/v1/namespaces/$namespace/secrets$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a Secret.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Secret> createCoreV1NamespacedSecret({
    required api_core_v1.Secret body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/secrets$query', jsonBody);
    return api_core_v1.Secret.fromJson(result);
  }

  /// Read the specified Secret.
  ///
  /// [name] Name of the Secret.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Secret> readCoreV1NamespacedSecret({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/secrets/$name$query');
    return api_core_v1.Secret.fromJson(result);
  }

  /// Delete a Secret.
  ///
  /// [name] Name of the Secret.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1NamespacedSecret({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/secrets/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified Secret.
  ///
  /// [name] Name of the Secret.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Secret> replaceCoreV1NamespacedSecret({
    required api_core_v1.Secret body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/secrets/$name$query', jsonBody);
    return api_core_v1.Secret.fromJson(result);
  }

  /// Partially update the specified Secret.
  ///
  /// [name] Name of the Secret.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Secret> patchCoreV1NamespacedSecret({
    required api_core_v1.Secret body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/secrets/$name$query',
        jsonBody,
        patchType);
    return api_core_v1.Secret.fromJson(result);
  }

  /// List or watch objects of kind ServiceAccount.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceAccountList> listCoreV1NamespacedServiceAccount({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts$query');
    return api_core_v1.ServiceAccountList.fromJson(result);
  }

  /// Delete collection of ServiceAccount.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedServiceAccount({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a ServiceAccount.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceAccount> createCoreV1NamespacedServiceAccount({
    required api_core_v1.ServiceAccount body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts$query', jsonBody);
    return api_core_v1.ServiceAccount.fromJson(result);
  }

  /// Read the specified ServiceAccount.
  ///
  /// [name] Name of the ServiceAccount.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceAccount> readCoreV1NamespacedServiceAccount({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts/$name$query');
    return api_core_v1.ServiceAccount.fromJson(result);
  }

  /// Delete a ServiceAccount.
  ///
  /// [name] Name of the ServiceAccount.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceAccount> deleteCoreV1NamespacedServiceAccount({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts/$name$query');
    return api_core_v1.ServiceAccount.fromJson(result);
  }

  /// Replace the specified ServiceAccount.
  ///
  /// [name] Name of the ServiceAccount.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceAccount> replaceCoreV1NamespacedServiceAccount({
    required api_core_v1.ServiceAccount body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts/$name$query', jsonBody);
    return api_core_v1.ServiceAccount.fromJson(result);
  }

  /// Partially update the specified ServiceAccount.
  ///
  /// [name] Name of the ServiceAccount.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceAccount> patchCoreV1NamespacedServiceAccount({
    required api_core_v1.ServiceAccount body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts/$name$query',
        jsonBody,
        patchType);
    return api_core_v1.ServiceAccount.fromJson(result);
  }

  /// Create token of a ServiceAccount.
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed.
  ///
  /// [fieldManager] FieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [fieldValidation] FieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  ///
  /// [name] Name of the TokenRequest.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_authentication_v1.TokenRequest>
      createCoreV1NamespacedServiceAccountToken({
    required api_authentication_v1.TokenRequest body,
    String? dryRun,
    String? fieldManager,
    String? fieldValidation,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (dryRun != null) {
      queryStrings['dryRun'] = dryRun;
    }
    if (fieldManager != null) {
      queryStrings['fieldManager'] = fieldManager;
    }
    if (fieldValidation != null) {
      queryStrings['fieldValidation'] = fieldValidation;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/serviceaccounts/$name/token$query',
        jsonBody);
    return api_authentication_v1.TokenRequest.fromJson(result);
  }

  /// List or watch objects of kind Service.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.ServiceList> listCoreV1NamespacedService({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/services$query');
    return api_core_v1.ServiceList.fromJson(result);
  }

  /// Delete collection of Service.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionNamespacedService({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/api/v1/namespaces/$namespace/services$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a Service.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> createCoreV1NamespacedService({
    required api_core_v1.Service body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/api/v1/namespaces/$namespace/services$query', jsonBody);
    return api_core_v1.Service.fromJson(result);
  }

  /// Read the specified Service.
  ///
  /// [name] Name of the Service.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> readCoreV1NamespacedService({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/namespaces/$namespace/services/$name$query');
    return api_core_v1.Service.fromJson(result);
  }

  /// Delete a Service.
  ///
  /// [name] Name of the Service.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> deleteCoreV1NamespacedService({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/api/v1/namespaces/$namespace/services/$name$query');
    return api_core_v1.Service.fromJson(result);
  }

  /// Replace the specified Service.
  ///
  /// [name] Name of the Service.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> replaceCoreV1NamespacedService({
    required api_core_v1.Service body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/services/$name$query', jsonBody);
    return api_core_v1.Service.fromJson(result);
  }

  /// Partially update the specified Service.
  ///
  /// [name] Name of the Service.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> patchCoreV1NamespacedService({
    required api_core_v1.Service body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/services/$name$query',
        jsonBody,
        patchType);
    return api_core_v1.Service.fromJson(result);
  }

  /// Connect GET requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1GetNamespacedServiceProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy$query');
    return result;
  }

  /// Connect DELETE requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1DeleteNamespacedServiceProxy({
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy$query');
    return result;
  }

  /// Connect POST requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1PostNamespacedServiceProxy({
    required String body,
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy$query', body);
    return result;
  }

  /// Connect PUT requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1PutNamespacedServiceProxy({
    required String body,
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _putJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy$query', body);
    return result;
  }

  /// Connect PATCH requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1PatchNamespacedServiceProxy({
    required String body,
    required String name,
    required String namespace,
    String? pathQuery,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _patchJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy$query',
        body,
        patchType);
    return result;
  }

  /// Connect HEAD requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1HeadNamespacedServiceProxy({
    required String body,
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _headJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy$query');
    return result;
  }

  /// Connect OPTIONS requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1OptionsNamespacedServiceProxy({
    required String body,
    required String name,
    required String namespace,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _optionsJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy$query');
    return result;
  }

  /// Connect GET requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1GetNamespacedServiceProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path$query');
    return result;
  }

  /// Connect DELETE requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1DeleteNamespacedServiceProxyWithPath({
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path$query');
    return result;
  }

  /// Connect POST requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1PostNamespacedServiceProxyWithPath({
    required String body,
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _postJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path$query', body);
    return result;
  }

  /// Connect PUT requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1PutNamespacedServiceProxyWithPath({
    required String body,
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _putJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path$query', body);
    return result;
  }

  /// Connect PATCH requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1PatchNamespacedServiceProxyWithPath({
    required String body,
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _patchJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path$query',
        body,
        patchType);
    return result;
  }

  /// Connect HEAD requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1HeadNamespacedServiceProxyWithPath({
    required String body,
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _headJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path$query');
    return result;
  }

  /// Connect OPTIONS requests to proxy of Service.
  ///
  /// [name] Name of the ServiceProxyOptions.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.
  Future<String> connectCoreV1OptionsNamespacedServiceProxyWithPath({
    required String body,
    required String name,
    required String namespace,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _optionsJsonString(
        '/api/v1/namespaces/$namespace/services/$name/proxy/$path$query');
    return result;
  }

  /// Read status of the specified Service.
  ///
  /// [name] Name of the Service.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> readCoreV1NamespacedServiceStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/namespaces/$namespace/services/$name/status$query');
    return api_core_v1.Service.fromJson(result);
  }

  /// Replace status of the specified Service.
  ///
  /// [name] Name of the Service.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> replaceCoreV1NamespacedServiceStatus({
    required api_core_v1.Service body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/namespaces/$namespace/services/$name/status$query', jsonBody);
    return api_core_v1.Service.fromJson(result);
  }

  /// Partially update status of the specified Service.
  ///
  /// [name] Name of the Service.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Service> patchCoreV1NamespacedServiceStatus({
    required api_core_v1.Service body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$namespace/services/$name/status$query',
        jsonBody,
        patchType);
    return api_core_v1.Service.fromJson(result);
  }

  /// Read the specified Namespace.
  ///
  /// [name] Name of the Namespace.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> readCoreV1Namespace({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/namespaces/$name$query');
    return api_core_v1.Namespace.fromJson(result);
  }

  /// Delete a Namespace.
  ///
  /// [name] Name of the Namespace.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1Namespace({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap('/api/v1/namespaces/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified Namespace.
  ///
  /// [name] Name of the Namespace.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> replaceCoreV1Namespace({
    required api_core_v1.Namespace body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result =
        await _putJsonMap('/api/v1/namespaces/$name$query', jsonBody);
    return api_core_v1.Namespace.fromJson(result);
  }

  /// Partially update the specified Namespace.
  ///
  /// [name] Name of the Namespace.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> patchCoreV1Namespace({
    required api_core_v1.Namespace body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$name$query', jsonBody, patchType);
    return api_core_v1.Namespace.fromJson(result);
  }

  /// Replace finalize of the specified Namespace.
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed.
  ///
  /// [fieldManager] FieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [fieldValidation] FieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  ///
  /// [name] Name of the Namespace.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> replaceCoreV1NamespaceFinalize({
    required api_core_v1.Namespace body,
    String? dryRun,
    String? fieldManager,
    String? fieldValidation,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (dryRun != null) {
      queryStrings['dryRun'] = dryRun;
    }
    if (fieldManager != null) {
      queryStrings['fieldManager'] = fieldManager;
    }
    if (fieldValidation != null) {
      queryStrings['fieldValidation'] = fieldValidation;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result =
        await _putJsonMap('/api/v1/namespaces/$name/finalize$query', jsonBody);
    return api_core_v1.Namespace.fromJson(result);
  }

  /// Read status of the specified Namespace.
  ///
  /// [name] Name of the Namespace.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> readCoreV1NamespaceStatus({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/namespaces/$name/status$query');
    return api_core_v1.Namespace.fromJson(result);
  }

  /// Replace status of the specified Namespace.
  ///
  /// [name] Name of the Namespace.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> replaceCoreV1NamespaceStatus({
    required api_core_v1.Namespace body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result =
        await _putJsonMap('/api/v1/namespaces/$name/status$query', jsonBody);
    return api_core_v1.Namespace.fromJson(result);
  }

  /// Partially update status of the specified Namespace.
  ///
  /// [name] Name of the Namespace.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Namespace> patchCoreV1NamespaceStatus({
    required api_core_v1.Namespace body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/namespaces/$name/status$query', jsonBody, patchType);
    return api_core_v1.Namespace.fromJson(result);
  }

  /// List or watch objects of kind Node.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.NodeList> listCoreV1Node({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/nodes$query');
    return api_core_v1.NodeList.fromJson(result);
  }

  /// Delete collection of Node.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1CollectionNode({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap('/api/v1/nodes$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a Node.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> createCoreV1Node({
    required api_core_v1.Node body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap('/api/v1/nodes$query', jsonBody);
    return api_core_v1.Node.fromJson(result);
  }

  /// Read the specified Node.
  ///
  /// [name] Name of the Node.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> readCoreV1Node({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/nodes/$name$query');
    return api_core_v1.Node.fromJson(result);
  }

  /// Delete a Node.
  ///
  /// [name] Name of the Node.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteCoreV1Node({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap('/api/v1/nodes/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified Node.
  ///
  /// [name] Name of the Node.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> replaceCoreV1Node({
    required api_core_v1.Node body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap('/api/v1/nodes/$name$query', jsonBody);
    return api_core_v1.Node.fromJson(result);
  }

  /// Partially update the specified Node.
  ///
  /// [name] Name of the Node.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> patchCoreV1Node({
    required api_core_v1.Node body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result =
        await _patchJsonMap('/api/v1/nodes/$name$query', jsonBody, patchType);
    return api_core_v1.Node.fromJson(result);
  }

  /// Connect GET requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1GetNodeProxy({
    required String name,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonString('/api/v1/nodes/$name/proxy$query');
    return result;
  }

  /// Connect DELETE requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1DeleteNodeProxy({
    required String name,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonString('/api/v1/nodes/$name/proxy$query');
    return result;
  }

  /// Connect POST requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1PostNodeProxy({
    required String body,
    required String name,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _postJsonString('/api/v1/nodes/$name/proxy$query', body);
    return result;
  }

  /// Connect PUT requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1PutNodeProxy({
    required String body,
    required String name,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _putJsonString('/api/v1/nodes/$name/proxy$query', body);
    return result;
  }

  /// Connect PATCH requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1PatchNodeProxy({
    required String body,
    required String name,
    String? pathQuery,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _patchJsonString(
        '/api/v1/nodes/$name/proxy$query', body, patchType);
    return result;
  }

  /// Connect HEAD requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1HeadNodeProxy({
    required String body,
    required String name,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _headJsonString('/api/v1/nodes/$name/proxy$query');
    return result;
  }

  /// Connect OPTIONS requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1OptionsNodeProxy({
    required String body,
    required String name,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _optionsJsonString('/api/v1/nodes/$name/proxy$query');
    return result;
  }

  /// Connect GET requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1GetNodeProxyWithPath({
    required String name,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonString('/api/v1/nodes/$name/proxy/$path$query');
    return result;
  }

  /// Connect DELETE requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1DeleteNodeProxyWithPath({
    required String name,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonString('/api/v1/nodes/$name/proxy/$path$query');
    return result;
  }

  /// Connect POST requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1PostNodeProxyWithPath({
    required String body,
    required String name,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _postJsonString('/api/v1/nodes/$name/proxy/$path$query', body);
    return result;
  }

  /// Connect PUT requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1PutNodeProxyWithPath({
    required String body,
    required String name,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _putJsonString('/api/v1/nodes/$name/proxy/$path$query', body);
    return result;
  }

  /// Connect PATCH requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1PatchNodeProxyWithPath({
    required String body,
    required String name,
    required String path,
    String? pathQuery,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _patchJsonString(
        '/api/v1/nodes/$name/proxy/$path$query', body, patchType);
    return result;
  }

  /// Connect HEAD requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1HeadNodeProxyWithPath({
    required String body,
    required String name,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _headJsonString('/api/v1/nodes/$name/proxy/$path$query');
    return result;
  }

  /// Connect OPTIONS requests to proxy of Node.
  ///
  /// [name] Name of the NodeProxyOptions.
  ///
  /// [path] Path to the resource.
  ///
  /// [pathQuery] Path is the URL path to use for the current proxy request to node.
  Future<String> connectCoreV1OptionsNodeProxyWithPath({
    required String body,
    required String name,
    required String path,
    String? pathQuery,
  }) async {
    final queryStrings = <String, Object>{};
    if (pathQuery != null) {
      queryStrings['path'] = pathQuery;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _optionsJsonString('/api/v1/nodes/$name/proxy/$path$query');
    return result;
  }

  /// Read status of the specified Node.
  ///
  /// [name] Name of the Node.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> readCoreV1NodeStatus({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/nodes/$name/status$query');
    return api_core_v1.Node.fromJson(result);
  }

  /// Replace status of the specified Node.
  ///
  /// [name] Name of the Node.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> replaceCoreV1NodeStatus({
    required api_core_v1.Node body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result =
        await _putJsonMap('/api/v1/nodes/$name/status$query', jsonBody);
    return api_core_v1.Node.fromJson(result);
  }

  /// Partially update status of the specified Node.
  ///
  /// [name] Name of the Node.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.Node> patchCoreV1NodeStatus({
    required api_core_v1.Node body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/nodes/$name/status$query', jsonBody, patchType);
    return api_core_v1.Node.fromJson(result);
  }

  /// List or watch objects of kind PersistentVolumeClaim.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.PersistentVolumeClaimList>
      listCoreV1PersistentVolumeClaimForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/persistentvolumeclaims$query');
    return api_core_v1.PersistentVolumeClaimList.fromJson(result);
  }

  /// List or watch objects of kind PersistentVolume.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolumeList> listCoreV1PersistentVolume({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/persistentvolumes$query');
    return api_core_v1.PersistentVolumeList.fromJson(result);
  }

  /// Delete collection of PersistentVolume.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoreV1CollectionPersistentVolume({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap('/api/v1/persistentvolumes$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a PersistentVolume.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> createCoreV1PersistentVolume({
    required api_core_v1.PersistentVolume body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result =
        await _postJsonMap('/api/v1/persistentvolumes$query', jsonBody);
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// Read the specified PersistentVolume.
  ///
  /// [name] Name of the PersistentVolume.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> readCoreV1PersistentVolume({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/persistentvolumes/$name$query');
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// Delete a PersistentVolume.
  ///
  /// [name] Name of the PersistentVolume.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> deleteCoreV1PersistentVolume({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/api/v1/persistentvolumes/$name$query');
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// Replace the specified PersistentVolume.
  ///
  /// [name] Name of the PersistentVolume.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> replaceCoreV1PersistentVolume({
    required api_core_v1.PersistentVolume body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result =
        await _putJsonMap('/api/v1/persistentvolumes/$name$query', jsonBody);
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// Partially update the specified PersistentVolume.
  ///
  /// [name] Name of the PersistentVolume.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> patchCoreV1PersistentVolume({
    required api_core_v1.PersistentVolume body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/persistentvolumes/$name$query', jsonBody, patchType);
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// Read status of the specified PersistentVolume.
  ///
  /// [name] Name of the PersistentVolume.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> readCoreV1PersistentVolumeStatus({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/persistentvolumes/$name/status$query');
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// Replace status of the specified PersistentVolume.
  ///
  /// [name] Name of the PersistentVolume.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> replaceCoreV1PersistentVolumeStatus({
    required api_core_v1.PersistentVolume body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/api/v1/persistentvolumes/$name/status$query', jsonBody);
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// Partially update status of the specified PersistentVolume.
  ///
  /// [name] Name of the PersistentVolume.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_core_v1.PersistentVolume> patchCoreV1PersistentVolumeStatus({
    required api_core_v1.PersistentVolume body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/api/v1/persistentvolumes/$name/status$query', jsonBody, patchType);
    return api_core_v1.PersistentVolume.fromJson(result);
  }

  /// List or watch objects of kind Pod.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.PodList> listCoreV1PodForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/pods$query');
    return api_core_v1.PodList.fromJson(result);
  }

  /// List or watch objects of kind PodTemplate.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.PodTemplateList> listCoreV1PodTemplateForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/podtemplates$query');
    return api_core_v1.PodTemplateList.fromJson(result);
  }

  /// List or watch objects of kind ReplicationController.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.ReplicationControllerList>
      listCoreV1ReplicationControllerForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/replicationcontrollers$query');
    return api_core_v1.ReplicationControllerList.fromJson(result);
  }

  /// List or watch objects of kind ResourceQuota.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.ResourceQuotaList>
      listCoreV1ResourceQuotaForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/resourcequotas$query');
    return api_core_v1.ResourceQuotaList.fromJson(result);
  }

  /// List or watch objects of kind Secret.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.SecretList> listCoreV1SecretForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/secrets$query');
    return api_core_v1.SecretList.fromJson(result);
  }

  /// List or watch objects of kind ServiceAccount.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.ServiceAccountList>
      listCoreV1ServiceAccountForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/serviceaccounts$query');
    return api_core_v1.ServiceAccountList.fromJson(result);
  }

  /// List or watch objects of kind Service.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_core_v1.ServiceList> listCoreV1ServiceForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/services$query');
    return api_core_v1.ServiceList.fromJson(result);
  }

  /// Watch individual changes to a list of ConfigMap.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1ConfigMapListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/configmaps$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Endpoints.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1EndpointsListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/endpoints$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Event.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1EventListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/events$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of LimitRange.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1LimitRangeListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/limitranges$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Namespace.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1NamespaceList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/namespaces$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of ConfigMap.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedConfigMapList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/configmaps$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind ConfigMap. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the ConfigMap.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedConfigMap({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/configmaps/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Endpoints.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedEndpointsList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/endpoints$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind Endpoints. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the Endpoints.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedEndpoints({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/endpoints/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Event.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedEventList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/watch/namespaces/$namespace/events$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind Event. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1NamespacedEvent({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/events/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of LimitRange.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedLimitRangeList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/limitranges$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind LimitRange. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the LimitRange.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedLimitRange({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/limitranges/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of PersistentVolumeClaim.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedPersistentVolumeClaimList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/persistentvolumeclaims$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind PersistentVolumeClaim. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the PersistentVolumeClaim.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedPersistentVolumeClaim({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/persistentvolumeclaims/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Pod.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedPodList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/watch/namespaces/$namespace/pods$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind Pod. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the Pod.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1NamespacedPod({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/pods/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of PodTemplate.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedPodTemplateList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/podtemplates$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind PodTemplate. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the PodTemplate.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedPodTemplate({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/podtemplates/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of ReplicationController.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedReplicationControllerList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/replicationcontrollers$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind ReplicationController. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the ReplicationController.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedReplicationController({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/replicationcontrollers/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of ResourceQuota.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedResourceQuotaList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/resourcequotas$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind ResourceQuota. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the ResourceQuota.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedResourceQuota({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/resourcequotas/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Secret.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedSecretList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/watch/namespaces/$namespace/secrets$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind Secret. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the Secret.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1NamespacedSecret({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/secrets/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of ServiceAccount.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedServiceAccountList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/serviceaccounts$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind ServiceAccount. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the ServiceAccount.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedServiceAccount({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/serviceaccounts/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Service.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedServiceList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/watch/namespaces/$namespace/services$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind Service. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the Service.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1NamespacedService({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/api/v1/watch/namespaces/$namespace/services/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind Namespace. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the Namespace.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1Namespace({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/namespaces/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Node.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1NodeList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/nodes$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind Node. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the Node.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1Node({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/nodes/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of PersistentVolumeClaim.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1PersistentVolumeClaimListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/watch/persistentvolumeclaims$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of PersistentVolume.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1PersistentVolumeList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/persistentvolumes$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind PersistentVolume. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the PersistentVolume.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchCoreV1PersistentVolume({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/watch/persistentvolumes/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Pod.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1PodListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/pods$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of PodTemplate.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1PodTemplateListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/podtemplates$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of ReplicationController.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1ReplicationControllerListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/api/v1/watch/replicationcontrollers$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of ResourceQuota.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1ResourceQuotaListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/resourcequotas$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Secret.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1SecretListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/secrets$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of ServiceAccount.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1ServiceAccountListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/serviceaccounts$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Service.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoreV1ServiceListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/api/v1/watch/services$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get available API versions.
  Future<apimachinery_pkg_apis_meta_v1.APIGroupList> getAPIVersions() async {
    final result = await _getJsonMap('/apis/');
    return apimachinery_pkg_apis_meta_v1.APIGroupList.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getAdmissionregistrationAPIGroup() async {
    final result = await _getJsonMap('/apis/admissionregistration.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAdmissionregistrationV1APIResources() async {
    final result = await _getJsonMap('/apis/admissionregistration.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind MutatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.MutatingWebhookConfigurationList>
      listAdmissionregistrationV1MutatingWebhookConfiguration({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations$query');
    return api_admissionregistration_v1.MutatingWebhookConfigurationList
        .fromJson(result);
  }

  /// Delete collection of MutatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a MutatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.MutatingWebhookConfiguration>
      createAdmissionregistrationV1MutatingWebhookConfiguration({
    required api_admissionregistration_v1.MutatingWebhookConfiguration body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations$query',
        jsonBody);
    return api_admissionregistration_v1.MutatingWebhookConfiguration.fromJson(
        result);
  }

  /// Read the specified MutatingWebhookConfiguration.
  ///
  /// [name] Name of the MutatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.MutatingWebhookConfiguration>
      readAdmissionregistrationV1MutatingWebhookConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/$name$query');
    return api_admissionregistration_v1.MutatingWebhookConfiguration.fromJson(
        result);
  }

  /// Delete a MutatingWebhookConfiguration.
  ///
  /// [name] Name of the MutatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAdmissionregistrationV1MutatingWebhookConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified MutatingWebhookConfiguration.
  ///
  /// [name] Name of the MutatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.MutatingWebhookConfiguration>
      replaceAdmissionregistrationV1MutatingWebhookConfiguration({
    required api_admissionregistration_v1.MutatingWebhookConfiguration body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/$name$query',
        jsonBody);
    return api_admissionregistration_v1.MutatingWebhookConfiguration.fromJson(
        result);
  }

  /// Partially update the specified MutatingWebhookConfiguration.
  ///
  /// [name] Name of the MutatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.MutatingWebhookConfiguration>
      patchAdmissionregistrationV1MutatingWebhookConfiguration({
    required api_admissionregistration_v1.MutatingWebhookConfiguration body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/$name$query',
        jsonBody,
        patchType);
    return api_admissionregistration_v1.MutatingWebhookConfiguration.fromJson(
        result);
  }

  /// List or watch objects of kind ValidatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.ValidatingWebhookConfigurationList>
      listAdmissionregistrationV1ValidatingWebhookConfiguration({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations$query');
    return api_admissionregistration_v1.ValidatingWebhookConfigurationList
        .fromJson(result);
  }

  /// Delete collection of ValidatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a ValidatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.ValidatingWebhookConfiguration>
      createAdmissionregistrationV1ValidatingWebhookConfiguration({
    required api_admissionregistration_v1.ValidatingWebhookConfiguration body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations$query',
        jsonBody);
    return api_admissionregistration_v1.ValidatingWebhookConfiguration.fromJson(
        result);
  }

  /// Read the specified ValidatingWebhookConfiguration.
  ///
  /// [name] Name of the ValidatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.ValidatingWebhookConfiguration>
      readAdmissionregistrationV1ValidatingWebhookConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/$name$query');
    return api_admissionregistration_v1.ValidatingWebhookConfiguration.fromJson(
        result);
  }

  /// Delete a ValidatingWebhookConfiguration.
  ///
  /// [name] Name of the ValidatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAdmissionregistrationV1ValidatingWebhookConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified ValidatingWebhookConfiguration.
  ///
  /// [name] Name of the ValidatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.ValidatingWebhookConfiguration>
      replaceAdmissionregistrationV1ValidatingWebhookConfiguration({
    required api_admissionregistration_v1.ValidatingWebhookConfiguration body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/$name$query',
        jsonBody);
    return api_admissionregistration_v1.ValidatingWebhookConfiguration.fromJson(
        result);
  }

  /// Partially update the specified ValidatingWebhookConfiguration.
  ///
  /// [name] Name of the ValidatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_admissionregistration_v1.ValidatingWebhookConfiguration>
      patchAdmissionregistrationV1ValidatingWebhookConfiguration({
    required api_admissionregistration_v1.ValidatingWebhookConfiguration body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/$name$query',
        jsonBody,
        patchType);
    return api_admissionregistration_v1.ValidatingWebhookConfiguration.fromJson(
        result);
  }

  /// Watch individual changes to a list of MutatingWebhookConfiguration.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAdmissionregistrationV1MutatingWebhookConfigurationList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind MutatingWebhookConfiguration. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the MutatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAdmissionregistrationV1MutatingWebhookConfiguration({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of ValidatingWebhookConfiguration.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAdmissionregistrationV1ValidatingWebhookConfigurationList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind ValidatingWebhookConfiguration. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the ValidatingWebhookConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAdmissionregistrationV1ValidatingWebhookConfiguration({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getApiextensionsAPIGroup() async {
    final result = await _getJsonMap('/apis/apiextensions.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getApiextensionsV1APIResources() async {
    final result = await _getJsonMap('/apis/apiextensions.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind CustomResourceDefinition.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
          apiextensions__apiserver_pkg_apis_apiextensions_v1
          .CustomResourceDefinitionList>
      listApiextensionsV1CustomResourceDefinition({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions$query');
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinitionList.fromJson(result);
  }

  /// Delete collection of CustomResourceDefinition.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteApiextensionsV1CollectionCustomResourceDefinition({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a CustomResourceDefinition.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
      apiextensions__apiserver_pkg_apis_apiextensions_v1
      .CustomResourceDefinition> createApiextensionsV1CustomResourceDefinition({
    required apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition
        body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions$query',
        jsonBody);
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// Read the specified CustomResourceDefinition.
  ///
  /// [name] Name of the CustomResourceDefinition.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
      apiextensions__apiserver_pkg_apis_apiextensions_v1
      .CustomResourceDefinition> readApiextensionsV1CustomResourceDefinition({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name$query');
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// Delete a CustomResourceDefinition.
  ///
  /// [name] Name of the CustomResourceDefinition.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteApiextensionsV1CustomResourceDefinition({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified CustomResourceDefinition.
  ///
  /// [name] Name of the CustomResourceDefinition.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
          apiextensions__apiserver_pkg_apis_apiextensions_v1
          .CustomResourceDefinition>
      replaceApiextensionsV1CustomResourceDefinition({
    required apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition
        body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name$query',
        jsonBody);
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// Partially update the specified CustomResourceDefinition.
  ///
  /// [name] Name of the CustomResourceDefinition.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
      apiextensions__apiserver_pkg_apis_apiextensions_v1
      .CustomResourceDefinition> patchApiextensionsV1CustomResourceDefinition({
    required apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition
        body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name$query',
        jsonBody,
        patchType);
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// Read status of the specified CustomResourceDefinition.
  ///
  /// [name] Name of the CustomResourceDefinition.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
          apiextensions__apiserver_pkg_apis_apiextensions_v1
          .CustomResourceDefinition>
      readApiextensionsV1CustomResourceDefinitionStatus({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name/status$query');
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// Replace status of the specified CustomResourceDefinition.
  ///
  /// [name] Name of the CustomResourceDefinition.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
          apiextensions__apiserver_pkg_apis_apiextensions_v1
          .CustomResourceDefinition>
      replaceApiextensionsV1CustomResourceDefinitionStatus({
    required apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition
        body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name/status$query',
        jsonBody);
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// Partially update status of the specified CustomResourceDefinition.
  ///
  /// [name] Name of the CustomResourceDefinition.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<
          apiextensions__apiserver_pkg_apis_apiextensions_v1
          .CustomResourceDefinition>
      patchApiextensionsV1CustomResourceDefinitionStatus({
    required apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition
        body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apiextensions.k8s.io/v1/customresourcedefinitions/$name/status$query',
        jsonBody,
        patchType);
    return apiextensions__apiserver_pkg_apis_apiextensions_v1
        .CustomResourceDefinition.fromJson(result);
  }

  /// Watch individual changes to a list of CustomResourceDefinition.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchApiextensionsV1CustomResourceDefinitionList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind CustomResourceDefinition. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the CustomResourceDefinition.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchApiextensionsV1CustomResourceDefinition({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getApiregistrationAPIGroup() async {
    final result = await _getJsonMap('/apis/apiregistration.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getApiregistrationV1APIResources() async {
    final result = await _getJsonMap('/apis/apiregistration.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind APIService.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIServiceList>
      listApiregistrationV1APIService({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/apiregistration.k8s.io/v1/apiservices$query');
    return kube__aggregator_pkg_apis_apiregistration_v1.APIServiceList.fromJson(
        result);
  }

  /// Delete collection of APIService.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteApiregistrationV1CollectionAPIService({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create an APIService.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      createApiregistrationV1APIService({
    required kube__aggregator_pkg_apis_apiregistration_v1.APIService body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices$query', jsonBody);
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// Read the specified APIService.
  ///
  /// [name] Name of the APIService.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      readApiregistrationV1APIService({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name$query');
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// Delete an APIService.
  ///
  /// [name] Name of the APIService.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteApiregistrationV1APIService({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified APIService.
  ///
  /// [name] Name of the APIService.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      replaceApiregistrationV1APIService({
    required kube__aggregator_pkg_apis_apiregistration_v1.APIService body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name$query', jsonBody);
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// Partially update the specified APIService.
  ///
  /// [name] Name of the APIService.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      patchApiregistrationV1APIService({
    required kube__aggregator_pkg_apis_apiregistration_v1.APIService body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name$query',
        jsonBody,
        patchType);
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// Read status of the specified APIService.
  ///
  /// [name] Name of the APIService.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      readApiregistrationV1APIServiceStatus({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name/status$query');
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// Replace status of the specified APIService.
  ///
  /// [name] Name of the APIService.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      replaceApiregistrationV1APIServiceStatus({
    required kube__aggregator_pkg_apis_apiregistration_v1.APIService body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name/status$query',
        jsonBody);
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// Partially update status of the specified APIService.
  ///
  /// [name] Name of the APIService.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<kube__aggregator_pkg_apis_apiregistration_v1.APIService>
      patchApiregistrationV1APIServiceStatus({
    required kube__aggregator_pkg_apis_apiregistration_v1.APIService body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apiregistration.k8s.io/v1/apiservices/$name/status$query',
        jsonBody,
        patchType);
    return kube__aggregator_pkg_apis_apiregistration_v1.APIService.fromJson(
        result);
  }

  /// Watch individual changes to a list of APIService.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchApiregistrationV1APIServiceList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apiregistration.k8s.io/v1/watch/apiservices$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind APIService. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the APIService.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchApiregistrationV1APIService({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apiregistration.k8s.io/v1/watch/apiservices/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getAppsAPIGroup() async {
    final result = await _getJsonMap('/apis/apps/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAppsV1APIResources() async {
    final result = await _getJsonMap('/apis/apps/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind ControllerRevision.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_apps_v1.ControllerRevisionList>
      listAppsV1ControllerRevisionForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/apps/v1/controllerrevisions$query');
    return api_apps_v1.ControllerRevisionList.fromJson(result);
  }

  /// List or watch objects of kind DaemonSet.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_apps_v1.DaemonSetList> listAppsV1DaemonSetForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/apps/v1/daemonsets$query');
    return api_apps_v1.DaemonSetList.fromJson(result);
  }

  /// List or watch objects of kind Deployment.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_apps_v1.DeploymentList> listAppsV1DeploymentForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/apps/v1/deployments$query');
    return api_apps_v1.DeploymentList.fromJson(result);
  }

  /// List or watch objects of kind ControllerRevision.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ControllerRevisionList>
      listAppsV1NamespacedControllerRevision({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions$query');
    return api_apps_v1.ControllerRevisionList.fromJson(result);
  }

  /// Delete collection of ControllerRevision.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1CollectionNamespacedControllerRevision({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a ControllerRevision.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ControllerRevision>
      createAppsV1NamespacedControllerRevision({
    required api_apps_v1.ControllerRevision body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions$query',
        jsonBody);
    return api_apps_v1.ControllerRevision.fromJson(result);
  }

  /// Read the specified ControllerRevision.
  ///
  /// [name] Name of the ControllerRevision.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ControllerRevision>
      readAppsV1NamespacedControllerRevision({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions/$name$query');
    return api_apps_v1.ControllerRevision.fromJson(result);
  }

  /// Delete a ControllerRevision.
  ///
  /// [name] Name of the ControllerRevision.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1NamespacedControllerRevision({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified ControllerRevision.
  ///
  /// [name] Name of the ControllerRevision.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ControllerRevision>
      replaceAppsV1NamespacedControllerRevision({
    required api_apps_v1.ControllerRevision body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions/$name$query',
        jsonBody);
    return api_apps_v1.ControllerRevision.fromJson(result);
  }

  /// Partially update the specified ControllerRevision.
  ///
  /// [name] Name of the ControllerRevision.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ControllerRevision>
      patchAppsV1NamespacedControllerRevision({
    required api_apps_v1.ControllerRevision body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/controllerrevisions/$name$query',
        jsonBody,
        patchType);
    return api_apps_v1.ControllerRevision.fromJson(result);
  }

  /// List or watch objects of kind DaemonSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSetList> listAppsV1NamespacedDaemonSet({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets$query');
    return api_apps_v1.DaemonSetList.fromJson(result);
  }

  /// Delete collection of DaemonSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1CollectionNamespacedDaemonSet({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a DaemonSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> createAppsV1NamespacedDaemonSet({
    required api_apps_v1.DaemonSet body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets$query', jsonBody);
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// Read the specified DaemonSet.
  ///
  /// [name] Name of the DaemonSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> readAppsV1NamespacedDaemonSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name$query');
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// Delete a DaemonSet.
  ///
  /// [name] Name of the DaemonSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteAppsV1NamespacedDaemonSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified DaemonSet.
  ///
  /// [name] Name of the DaemonSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> replaceAppsV1NamespacedDaemonSet({
    required api_apps_v1.DaemonSet body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name$query', jsonBody);
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// Partially update the specified DaemonSet.
  ///
  /// [name] Name of the DaemonSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> patchAppsV1NamespacedDaemonSet({
    required api_apps_v1.DaemonSet body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name$query',
        jsonBody,
        patchType);
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// Read status of the specified DaemonSet.
  ///
  /// [name] Name of the DaemonSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> readAppsV1NamespacedDaemonSetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name/status$query');
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// Replace status of the specified DaemonSet.
  ///
  /// [name] Name of the DaemonSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> replaceAppsV1NamespacedDaemonSetStatus({
    required api_apps_v1.DaemonSet body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name/status$query',
        jsonBody);
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// Partially update status of the specified DaemonSet.
  ///
  /// [name] Name of the DaemonSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DaemonSet> patchAppsV1NamespacedDaemonSetStatus({
    required api_apps_v1.DaemonSet body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/daemonsets/$name/status$query',
        jsonBody,
        patchType);
    return api_apps_v1.DaemonSet.fromJson(result);
  }

  /// List or watch objects of kind Deployment.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.DeploymentList> listAppsV1NamespacedDeployment({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments$query');
    return api_apps_v1.DeploymentList.fromJson(result);
  }

  /// Delete collection of Deployment.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1CollectionNamespacedDeployment({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a Deployment.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> createAppsV1NamespacedDeployment({
    required api_apps_v1.Deployment body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments$query', jsonBody);
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// Read the specified Deployment.
  ///
  /// [name] Name of the Deployment.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> readAppsV1NamespacedDeployment({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name$query');
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// Delete a Deployment.
  ///
  /// [name] Name of the Deployment.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1NamespacedDeployment({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified Deployment.
  ///
  /// [name] Name of the Deployment.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> replaceAppsV1NamespacedDeployment({
    required api_apps_v1.Deployment body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name$query',
        jsonBody);
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// Partially update the specified Deployment.
  ///
  /// [name] Name of the Deployment.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> patchAppsV1NamespacedDeployment({
    required api_apps_v1.Deployment body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name$query',
        jsonBody,
        patchType);
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// Read scale of the specified Deployment.
  ///
  /// [name] Name of the Scale.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> readAppsV1NamespacedDeploymentScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name/scale$query');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// Replace scale of the specified Deployment.
  ///
  /// [name] Name of the Scale.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> replaceAppsV1NamespacedDeploymentScale({
    required api_autoscaling_v1.Scale body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name/scale$query',
        jsonBody);
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// Partially update scale of the specified Deployment.
  ///
  /// [name] Name of the Scale.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> patchAppsV1NamespacedDeploymentScale({
    required api_autoscaling_v1.Scale body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name/scale$query',
        jsonBody,
        patchType);
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// Read status of the specified Deployment.
  ///
  /// [name] Name of the Deployment.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> readAppsV1NamespacedDeploymentStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name/status$query');
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// Replace status of the specified Deployment.
  ///
  /// [name] Name of the Deployment.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> replaceAppsV1NamespacedDeploymentStatus({
    required api_apps_v1.Deployment body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name/status$query',
        jsonBody);
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// Partially update status of the specified Deployment.
  ///
  /// [name] Name of the Deployment.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.Deployment> patchAppsV1NamespacedDeploymentStatus({
    required api_apps_v1.Deployment body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/deployments/$name/status$query',
        jsonBody,
        patchType);
    return api_apps_v1.Deployment.fromJson(result);
  }

  /// List or watch objects of kind ReplicaSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSetList> listAppsV1NamespacedReplicaSet({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets$query');
    return api_apps_v1.ReplicaSetList.fromJson(result);
  }

  /// Delete collection of ReplicaSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1CollectionNamespacedReplicaSet({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a ReplicaSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> createAppsV1NamespacedReplicaSet({
    required api_apps_v1.ReplicaSet body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets$query', jsonBody);
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// Read the specified ReplicaSet.
  ///
  /// [name] Name of the ReplicaSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> readAppsV1NamespacedReplicaSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name$query');
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// Delete a ReplicaSet.
  ///
  /// [name] Name of the ReplicaSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1NamespacedReplicaSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified ReplicaSet.
  ///
  /// [name] Name of the ReplicaSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> replaceAppsV1NamespacedReplicaSet({
    required api_apps_v1.ReplicaSet body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name$query',
        jsonBody);
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// Partially update the specified ReplicaSet.
  ///
  /// [name] Name of the ReplicaSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> patchAppsV1NamespacedReplicaSet({
    required api_apps_v1.ReplicaSet body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name$query',
        jsonBody,
        patchType);
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// Read scale of the specified ReplicaSet.
  ///
  /// [name] Name of the Scale.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> readAppsV1NamespacedReplicaSetScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name/scale$query');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// Replace scale of the specified ReplicaSet.
  ///
  /// [name] Name of the Scale.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> replaceAppsV1NamespacedReplicaSetScale({
    required api_autoscaling_v1.Scale body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name/scale$query',
        jsonBody);
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// Partially update scale of the specified ReplicaSet.
  ///
  /// [name] Name of the Scale.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> patchAppsV1NamespacedReplicaSetScale({
    required api_autoscaling_v1.Scale body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name/scale$query',
        jsonBody,
        patchType);
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// Read status of the specified ReplicaSet.
  ///
  /// [name] Name of the ReplicaSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> readAppsV1NamespacedReplicaSetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name/status$query');
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// Replace status of the specified ReplicaSet.
  ///
  /// [name] Name of the ReplicaSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> replaceAppsV1NamespacedReplicaSetStatus({
    required api_apps_v1.ReplicaSet body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name/status$query',
        jsonBody);
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// Partially update status of the specified ReplicaSet.
  ///
  /// [name] Name of the ReplicaSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.ReplicaSet> patchAppsV1NamespacedReplicaSetStatus({
    required api_apps_v1.ReplicaSet body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/replicasets/$name/status$query',
        jsonBody,
        patchType);
    return api_apps_v1.ReplicaSet.fromJson(result);
  }

  /// List or watch objects of kind StatefulSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSetList> listAppsV1NamespacedStatefulSet({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets$query');
    return api_apps_v1.StatefulSetList.fromJson(result);
  }

  /// Delete collection of StatefulSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1CollectionNamespacedStatefulSet({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a StatefulSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> createAppsV1NamespacedStatefulSet({
    required api_apps_v1.StatefulSet body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets$query', jsonBody);
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// Read the specified StatefulSet.
  ///
  /// [name] Name of the StatefulSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> readAppsV1NamespacedStatefulSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name$query');
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// Delete a StatefulSet.
  ///
  /// [name] Name of the StatefulSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAppsV1NamespacedStatefulSet({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified StatefulSet.
  ///
  /// [name] Name of the StatefulSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> replaceAppsV1NamespacedStatefulSet({
    required api_apps_v1.StatefulSet body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name$query',
        jsonBody);
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// Partially update the specified StatefulSet.
  ///
  /// [name] Name of the StatefulSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> patchAppsV1NamespacedStatefulSet({
    required api_apps_v1.StatefulSet body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name$query',
        jsonBody,
        patchType);
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// Read scale of the specified StatefulSet.
  ///
  /// [name] Name of the Scale.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> readAppsV1NamespacedStatefulSetScale({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name/scale$query');
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// Replace scale of the specified StatefulSet.
  ///
  /// [name] Name of the Scale.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> replaceAppsV1NamespacedStatefulSetScale({
    required api_autoscaling_v1.Scale body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name/scale$query',
        jsonBody);
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// Partially update scale of the specified StatefulSet.
  ///
  /// [name] Name of the Scale.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.Scale> patchAppsV1NamespacedStatefulSetScale({
    required api_autoscaling_v1.Scale body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name/scale$query',
        jsonBody,
        patchType);
    return api_autoscaling_v1.Scale.fromJson(result);
  }

  /// Read status of the specified StatefulSet.
  ///
  /// [name] Name of the StatefulSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> readAppsV1NamespacedStatefulSetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name/status$query');
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// Replace status of the specified StatefulSet.
  ///
  /// [name] Name of the StatefulSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> replaceAppsV1NamespacedStatefulSetStatus({
    required api_apps_v1.StatefulSet body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name/status$query',
        jsonBody);
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// Partially update status of the specified StatefulSet.
  ///
  /// [name] Name of the StatefulSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apps_v1.StatefulSet> patchAppsV1NamespacedStatefulSetStatus({
    required api_apps_v1.StatefulSet body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/apps/v1/namespaces/$namespace/statefulsets/$name/status$query',
        jsonBody,
        patchType);
    return api_apps_v1.StatefulSet.fromJson(result);
  }

  /// List or watch objects of kind ReplicaSet.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_apps_v1.ReplicaSetList> listAppsV1ReplicaSetForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/apps/v1/replicasets$query');
    return api_apps_v1.ReplicaSetList.fromJson(result);
  }

  /// List or watch objects of kind StatefulSet.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_apps_v1.StatefulSetList> listAppsV1StatefulSetForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/apps/v1/statefulsets$query');
    return api_apps_v1.StatefulSetList.fromJson(result);
  }

  /// Watch individual changes to a list of ControllerRevision.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1ControllerRevisionListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/apps/v1/watch/controllerrevisions$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of DaemonSet.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1DaemonSetListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/apps/v1/watch/daemonsets$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Deployment.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1DeploymentListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/apps/v1/watch/deployments$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of ControllerRevision.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedControllerRevisionList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/controllerrevisions$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind ControllerRevision. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the ControllerRevision.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedControllerRevision({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/controllerrevisions/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of DaemonSet.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedDaemonSetList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/daemonsets$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind DaemonSet. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the DaemonSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedDaemonSet({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/daemonsets/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Deployment.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedDeploymentList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/deployments$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind Deployment. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the Deployment.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedDeployment({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/deployments/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of ReplicaSet.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedReplicaSetList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/replicasets$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind ReplicaSet. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the ReplicaSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedReplicaSet({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/replicasets/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of StatefulSet.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedStatefulSetList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/statefulsets$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind StatefulSet. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the StatefulSet.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1NamespacedStatefulSet({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/apps/v1/watch/namespaces/$namespace/statefulsets/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of ReplicaSet.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1ReplicaSetListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/apps/v1/watch/replicasets$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of StatefulSet.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAppsV1StatefulSetListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/apps/v1/watch/statefulsets$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getAuthenticationAPIGroup() async {
    final result = await _getJsonMap('/apis/authentication.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAuthenticationV1APIResources() async {
    final result = await _getJsonMap('/apis/authentication.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// Create a TokenReview.
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed.
  ///
  /// [fieldManager] FieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [fieldValidation] FieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_authentication_v1.TokenReview> createAuthenticationV1TokenReview({
    required api_authentication_v1.TokenReview body,
    String? dryRun,
    String? fieldManager,
    String? fieldValidation,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (dryRun != null) {
      queryStrings['dryRun'] = dryRun;
    }
    if (fieldManager != null) {
      queryStrings['fieldManager'] = fieldManager;
    }
    if (fieldValidation != null) {
      queryStrings['fieldValidation'] = fieldValidation;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/authentication.k8s.io/v1/tokenreviews$query', jsonBody);
    return api_authentication_v1.TokenReview.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getAuthorizationAPIGroup() async {
    final result = await _getJsonMap('/apis/authorization.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAuthorizationV1APIResources() async {
    final result = await _getJsonMap('/apis/authorization.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// Create a LocalSubjectAccessReview.
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed.
  ///
  /// [fieldManager] FieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [fieldValidation] FieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_authorization_v1.LocalSubjectAccessReview>
      createAuthorizationV1NamespacedLocalSubjectAccessReview({
    required api_authorization_v1.LocalSubjectAccessReview body,
    String? dryRun,
    String? fieldManager,
    String? fieldValidation,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (dryRun != null) {
      queryStrings['dryRun'] = dryRun;
    }
    if (fieldManager != null) {
      queryStrings['fieldManager'] = fieldManager;
    }
    if (fieldValidation != null) {
      queryStrings['fieldValidation'] = fieldValidation;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/authorization.k8s.io/v1/namespaces/$namespace/localsubjectaccessreviews$query',
        jsonBody);
    return api_authorization_v1.LocalSubjectAccessReview.fromJson(result);
  }

  /// Create a SelfSubjectAccessReview.
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed.
  ///
  /// [fieldManager] FieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [fieldValidation] FieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_authorization_v1.SelfSubjectAccessReview>
      createAuthorizationV1SelfSubjectAccessReview({
    required api_authorization_v1.SelfSubjectAccessReview body,
    String? dryRun,
    String? fieldManager,
    String? fieldValidation,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (dryRun != null) {
      queryStrings['dryRun'] = dryRun;
    }
    if (fieldManager != null) {
      queryStrings['fieldManager'] = fieldManager;
    }
    if (fieldValidation != null) {
      queryStrings['fieldValidation'] = fieldValidation;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/authorization.k8s.io/v1/selfsubjectaccessreviews$query',
        jsonBody);
    return api_authorization_v1.SelfSubjectAccessReview.fromJson(result);
  }

  /// Create a SelfSubjectRulesReview.
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed.
  ///
  /// [fieldManager] FieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [fieldValidation] FieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_authorization_v1.SelfSubjectRulesReview>
      createAuthorizationV1SelfSubjectRulesReview({
    required api_authorization_v1.SelfSubjectRulesReview body,
    String? dryRun,
    String? fieldManager,
    String? fieldValidation,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (dryRun != null) {
      queryStrings['dryRun'] = dryRun;
    }
    if (fieldManager != null) {
      queryStrings['fieldManager'] = fieldManager;
    }
    if (fieldValidation != null) {
      queryStrings['fieldValidation'] = fieldValidation;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/authorization.k8s.io/v1/selfsubjectrulesreviews$query',
        jsonBody);
    return api_authorization_v1.SelfSubjectRulesReview.fromJson(result);
  }

  /// Create a SubjectAccessReview.
  ///
  /// [dryRun] When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed.
  ///
  /// [fieldManager] FieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
  ///
  /// [fieldValidation] FieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields, provided that the `ServerSideFieldValidation` feature gate is also enabled. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23 and is the default behavior when the `ServerSideFieldValidation` feature gate is disabled. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default when the `ServerSideFieldValidation` feature gate is enabled. - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_authorization_v1.SubjectAccessReview>
      createAuthorizationV1SubjectAccessReview({
    required api_authorization_v1.SubjectAccessReview body,
    String? dryRun,
    String? fieldManager,
    String? fieldValidation,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (dryRun != null) {
      queryStrings['dryRun'] = dryRun;
    }
    if (fieldManager != null) {
      queryStrings['fieldManager'] = fieldManager;
    }
    if (fieldValidation != null) {
      queryStrings['fieldValidation'] = fieldValidation;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/authorization.k8s.io/v1/subjectaccessreviews$query', jsonBody);
    return api_authorization_v1.SubjectAccessReview.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getAutoscalingAPIGroup() async {
    final result = await _getJsonMap('/apis/autoscaling/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAutoscalingV1APIResources() async {
    final result = await _getJsonMap('/apis/autoscaling/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind HorizontalPodAutoscaler.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_autoscaling_v1.HorizontalPodAutoscalerList>
      listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v1/horizontalpodautoscalers$query');
    return api_autoscaling_v1.HorizontalPodAutoscalerList.fromJson(result);
  }

  /// List or watch objects of kind HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscalerList>
      listAutoscalingV1NamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers$query');
    return api_autoscaling_v1.HorizontalPodAutoscalerList.fromJson(result);
  }

  /// Delete collection of HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      createAutoscalingV1NamespacedHorizontalPodAutoscaler({
    required api_autoscaling_v1.HorizontalPodAutoscaler body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers$query',
        jsonBody);
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Read the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      readAutoscalingV1NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name$query');
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Delete a HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAutoscalingV1NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      replaceAutoscalingV1NamespacedHorizontalPodAutoscaler({
    required api_autoscaling_v1.HorizontalPodAutoscaler body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name$query',
        jsonBody);
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Partially update the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      patchAutoscalingV1NamespacedHorizontalPodAutoscaler({
    required api_autoscaling_v1.HorizontalPodAutoscaler body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name$query',
        jsonBody,
        patchType);
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Read status of the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name/status$query');
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Replace status of the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus({
    required api_autoscaling_v1.HorizontalPodAutoscaler body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name/status$query',
        jsonBody);
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Partially update status of the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v1.HorizontalPodAutoscaler>
      patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus({
    required api_autoscaling_v1.HorizontalPodAutoscaler body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/autoscaling/v1/namespaces/$namespace/horizontalpodautoscalers/$name/status$query',
        jsonBody,
        patchType);
    return api_autoscaling_v1.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Watch individual changes to a list of HorizontalPodAutoscaler.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v1/watch/horizontalpodautoscalers$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of HorizontalPodAutoscaler.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV1NamespacedHorizontalPodAutoscalerList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v1/watch/namespaces/$namespace/horizontalpodautoscalers$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind HorizontalPodAutoscaler. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV1NamespacedHorizontalPodAutoscaler({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v1/watch/namespaces/$namespace/horizontalpodautoscalers/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAutoscalingV2APIResources() async {
    final result = await _getJsonMap('/apis/autoscaling/v2/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind HorizontalPodAutoscaler.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_autoscaling_v2.HorizontalPodAutoscalerList>
      listAutoscalingV2HorizontalPodAutoscalerForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2/horizontalpodautoscalers$query');
    return api_autoscaling_v2.HorizontalPodAutoscalerList.fromJson(result);
  }

  /// List or watch objects of kind HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2.HorizontalPodAutoscalerList>
      listAutoscalingV2NamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2/namespaces/$namespace/horizontalpodautoscalers$query');
    return api_autoscaling_v2.HorizontalPodAutoscalerList.fromJson(result);
  }

  /// Delete collection of HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAutoscalingV2CollectionNamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/autoscaling/v2/namespaces/$namespace/horizontalpodautoscalers$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2.HorizontalPodAutoscaler>
      createAutoscalingV2NamespacedHorizontalPodAutoscaler({
    required api_autoscaling_v2.HorizontalPodAutoscaler body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/autoscaling/v2/namespaces/$namespace/horizontalpodautoscalers$query',
        jsonBody);
    return api_autoscaling_v2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Read the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2.HorizontalPodAutoscaler>
      readAutoscalingV2NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2/namespaces/$namespace/horizontalpodautoscalers/$name$query');
    return api_autoscaling_v2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Delete a HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAutoscalingV2NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/autoscaling/v2/namespaces/$namespace/horizontalpodautoscalers/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2.HorizontalPodAutoscaler>
      replaceAutoscalingV2NamespacedHorizontalPodAutoscaler({
    required api_autoscaling_v2.HorizontalPodAutoscaler body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/autoscaling/v2/namespaces/$namespace/horizontalpodautoscalers/$name$query',
        jsonBody);
    return api_autoscaling_v2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Partially update the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2.HorizontalPodAutoscaler>
      patchAutoscalingV2NamespacedHorizontalPodAutoscaler({
    required api_autoscaling_v2.HorizontalPodAutoscaler body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/autoscaling/v2/namespaces/$namespace/horizontalpodautoscalers/$name$query',
        jsonBody,
        patchType);
    return api_autoscaling_v2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Read status of the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2.HorizontalPodAutoscaler>
      readAutoscalingV2NamespacedHorizontalPodAutoscalerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2/namespaces/$namespace/horizontalpodautoscalers/$name/status$query');
    return api_autoscaling_v2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Replace status of the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2.HorizontalPodAutoscaler>
      replaceAutoscalingV2NamespacedHorizontalPodAutoscalerStatus({
    required api_autoscaling_v2.HorizontalPodAutoscaler body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/autoscaling/v2/namespaces/$namespace/horizontalpodautoscalers/$name/status$query',
        jsonBody);
    return api_autoscaling_v2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Partially update status of the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2.HorizontalPodAutoscaler>
      patchAutoscalingV2NamespacedHorizontalPodAutoscalerStatus({
    required api_autoscaling_v2.HorizontalPodAutoscaler body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/autoscaling/v2/namespaces/$namespace/horizontalpodautoscalers/$name/status$query',
        jsonBody,
        patchType);
    return api_autoscaling_v2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Watch individual changes to a list of HorizontalPodAutoscaler.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV2HorizontalPodAutoscalerListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2/watch/horizontalpodautoscalers$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of HorizontalPodAutoscaler.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV2NamespacedHorizontalPodAutoscalerList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2/watch/namespaces/$namespace/horizontalpodautoscalers$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind HorizontalPodAutoscaler. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV2NamespacedHorizontalPodAutoscaler({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2/watch/namespaces/$namespace/horizontalpodautoscalers/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getAutoscalingV2beta2APIResources() async {
    final result = await _getJsonMap('/apis/autoscaling/v2beta2/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind HorizontalPodAutoscaler.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscalerList>
      listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/horizontalpodautoscalers$query');
    return api_autoscaling_v2beta2.HorizontalPodAutoscalerList.fromJson(result);
  }

  /// List or watch objects of kind HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscalerList>
      listAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers$query');
    return api_autoscaling_v2beta2.HorizontalPodAutoscalerList.fromJson(result);
  }

  /// Delete collection of HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscaler({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      createAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    required api_autoscaling_v2beta2.HorizontalPodAutoscaler body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers$query',
        jsonBody);
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Read the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      readAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name$query');
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Delete a HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    required api_autoscaling_v2beta2.HorizontalPodAutoscaler body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name$query',
        jsonBody);
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Partially update the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      patchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    required api_autoscaling_v2beta2.HorizontalPodAutoscaler body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name$query',
        jsonBody,
        patchType);
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Read status of the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name/status$query');
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Replace status of the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus({
    required api_autoscaling_v2beta2.HorizontalPodAutoscaler body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name/status$query',
        jsonBody);
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Partially update status of the specified HorizontalPodAutoscaler.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_autoscaling_v2beta2.HorizontalPodAutoscaler>
      patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus({
    required api_autoscaling_v2beta2.HorizontalPodAutoscaler body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/autoscaling/v2beta2/namespaces/$namespace/horizontalpodautoscalers/$name/status$query',
        jsonBody,
        patchType);
    return api_autoscaling_v2beta2.HorizontalPodAutoscaler.fromJson(result);
  }

  /// Watch individual changes to a list of HorizontalPodAutoscaler.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV2beta2HorizontalPodAutoscalerListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/watch/horizontalpodautoscalers$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of HorizontalPodAutoscaler.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/watch/namespaces/$namespace/horizontalpodautoscalers$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind HorizontalPodAutoscaler. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the HorizontalPodAutoscaler.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/autoscaling/v2beta2/watch/namespaces/$namespace/horizontalpodautoscalers/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getBatchAPIGroup() async {
    final result = await _getJsonMap('/apis/batch/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getBatchV1APIResources() async {
    final result = await _getJsonMap('/apis/batch/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind CronJob.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_batch_v1.CronJobList> listBatchV1CronJobForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/batch/v1/cronjobs$query');
    return api_batch_v1.CronJobList.fromJson(result);
  }

  /// List or watch objects of kind Job.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_batch_v1.JobList> listBatchV1JobForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/batch/v1/jobs$query');
    return api_batch_v1.JobList.fromJson(result);
  }

  /// List or watch objects of kind CronJob.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJobList> listBatchV1NamespacedCronJob({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs$query');
    return api_batch_v1.CronJobList.fromJson(result);
  }

  /// Delete collection of CronJob.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteBatchV1CollectionNamespacedCronJob({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a CronJob.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> createBatchV1NamespacedCronJob({
    required api_batch_v1.CronJob body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs$query', jsonBody);
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// Read the specified CronJob.
  ///
  /// [name] Name of the CronJob.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> readBatchV1NamespacedCronJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name$query');
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// Delete a CronJob.
  ///
  /// [name] Name of the CronJob.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteBatchV1NamespacedCronJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified CronJob.
  ///
  /// [name] Name of the CronJob.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> replaceBatchV1NamespacedCronJob({
    required api_batch_v1.CronJob body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name$query', jsonBody);
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// Partially update the specified CronJob.
  ///
  /// [name] Name of the CronJob.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> patchBatchV1NamespacedCronJob({
    required api_batch_v1.CronJob body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name$query',
        jsonBody,
        patchType);
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// Read status of the specified CronJob.
  ///
  /// [name] Name of the CronJob.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> readBatchV1NamespacedCronJobStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name/status$query');
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// Replace status of the specified CronJob.
  ///
  /// [name] Name of the CronJob.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> replaceBatchV1NamespacedCronJobStatus({
    required api_batch_v1.CronJob body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name/status$query',
        jsonBody);
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// Partially update status of the specified CronJob.
  ///
  /// [name] Name of the CronJob.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.CronJob> patchBatchV1NamespacedCronJobStatus({
    required api_batch_v1.CronJob body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/batch/v1/namespaces/$namespace/cronjobs/$name/status$query',
        jsonBody,
        patchType);
    return api_batch_v1.CronJob.fromJson(result);
  }

  /// List or watch objects of kind Job.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.JobList> listBatchV1NamespacedJob({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/batch/v1/namespaces/$namespace/jobs$query');
    return api_batch_v1.JobList.fromJson(result);
  }

  /// Delete collection of Job.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteBatchV1CollectionNamespacedJob({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/apis/batch/v1/namespaces/$namespace/jobs$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a Job.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> createBatchV1NamespacedJob({
    required api_batch_v1.Job body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs$query', jsonBody);
    return api_batch_v1.Job.fromJson(result);
  }

  /// Read the specified Job.
  ///
  /// [name] Name of the Job.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> readBatchV1NamespacedJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name$query');
    return api_batch_v1.Job.fromJson(result);
  }

  /// Delete a Job.
  ///
  /// [name] Name of the Job.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteBatchV1NamespacedJob({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified Job.
  ///
  /// [name] Name of the Job.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> replaceBatchV1NamespacedJob({
    required api_batch_v1.Job body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name$query', jsonBody);
    return api_batch_v1.Job.fromJson(result);
  }

  /// Partially update the specified Job.
  ///
  /// [name] Name of the Job.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> patchBatchV1NamespacedJob({
    required api_batch_v1.Job body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name$query',
        jsonBody,
        patchType);
    return api_batch_v1.Job.fromJson(result);
  }

  /// Read status of the specified Job.
  ///
  /// [name] Name of the Job.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> readBatchV1NamespacedJobStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name/status$query');
    return api_batch_v1.Job.fromJson(result);
  }

  /// Replace status of the specified Job.
  ///
  /// [name] Name of the Job.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> replaceBatchV1NamespacedJobStatus({
    required api_batch_v1.Job body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name/status$query',
        jsonBody);
    return api_batch_v1.Job.fromJson(result);
  }

  /// Partially update status of the specified Job.
  ///
  /// [name] Name of the Job.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_batch_v1.Job> patchBatchV1NamespacedJobStatus({
    required api_batch_v1.Job body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/batch/v1/namespaces/$namespace/jobs/$name/status$query',
        jsonBody,
        patchType);
    return api_batch_v1.Job.fromJson(result);
  }

  /// Watch individual changes to a list of CronJob.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchBatchV1CronJobListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/batch/v1/watch/cronjobs$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Job.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchBatchV1JobListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/batch/v1/watch/jobs$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of CronJob.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchBatchV1NamespacedCronJobList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/batch/v1/watch/namespaces/$namespace/cronjobs$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind CronJob. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the CronJob.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchBatchV1NamespacedCronJob({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/batch/v1/watch/namespaces/$namespace/cronjobs/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Job.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchBatchV1NamespacedJobList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/batch/v1/watch/namespaces/$namespace/jobs$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind Job. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the Job.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchBatchV1NamespacedJob({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/batch/v1/watch/namespaces/$namespace/jobs/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getCertificatesAPIGroup() async {
    final result = await _getJsonMap('/apis/certificates.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getCertificatesV1APIResources() async {
    final result = await _getJsonMap('/apis/certificates.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequestList>
      listCertificatesV1CertificateSigningRequest({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests$query');
    return api_certificates_v1.CertificateSigningRequestList.fromJson(result);
  }

  /// Delete collection of CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCertificatesV1CollectionCertificateSigningRequest({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      createCertificatesV1CertificateSigningRequest({
    required api_certificates_v1.CertificateSigningRequest body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests$query',
        jsonBody);
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// Read the specified CertificateSigningRequest.
  ///
  /// [name] Name of the CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      readCertificatesV1CertificateSigningRequest({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name$query');
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// Delete a CertificateSigningRequest.
  ///
  /// [name] Name of the CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCertificatesV1CertificateSigningRequest({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified CertificateSigningRequest.
  ///
  /// [name] Name of the CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      replaceCertificatesV1CertificateSigningRequest({
    required api_certificates_v1.CertificateSigningRequest body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name$query',
        jsonBody);
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// Partially update the specified CertificateSigningRequest.
  ///
  /// [name] Name of the CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      patchCertificatesV1CertificateSigningRequest({
    required api_certificates_v1.CertificateSigningRequest body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name$query',
        jsonBody,
        patchType);
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// Read approval of the specified CertificateSigningRequest.
  ///
  /// [name] Name of the CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      readCertificatesV1CertificateSigningRequestApproval({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name/approval$query');
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// Replace approval of the specified CertificateSigningRequest.
  ///
  /// [name] Name of the CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      replaceCertificatesV1CertificateSigningRequestApproval({
    required api_certificates_v1.CertificateSigningRequest body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name/approval$query',
        jsonBody);
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// Partially update approval of the specified CertificateSigningRequest.
  ///
  /// [name] Name of the CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      patchCertificatesV1CertificateSigningRequestApproval({
    required api_certificates_v1.CertificateSigningRequest body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name/approval$query',
        jsonBody,
        patchType);
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// Read status of the specified CertificateSigningRequest.
  ///
  /// [name] Name of the CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      readCertificatesV1CertificateSigningRequestStatus({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name/status$query');
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// Replace status of the specified CertificateSigningRequest.
  ///
  /// [name] Name of the CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      replaceCertificatesV1CertificateSigningRequestStatus({
    required api_certificates_v1.CertificateSigningRequest body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name/status$query',
        jsonBody);
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// Partially update status of the specified CertificateSigningRequest.
  ///
  /// [name] Name of the CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_certificates_v1.CertificateSigningRequest>
      patchCertificatesV1CertificateSigningRequestStatus({
    required api_certificates_v1.CertificateSigningRequest body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/certificates.k8s.io/v1/certificatesigningrequests/$name/status$query',
        jsonBody,
        patchType);
    return api_certificates_v1.CertificateSigningRequest.fromJson(result);
  }

  /// Watch individual changes to a list of CertificateSigningRequest.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCertificatesV1CertificateSigningRequestList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/certificates.k8s.io/v1/watch/certificatesigningrequests$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind CertificateSigningRequest. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the CertificateSigningRequest.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCertificatesV1CertificateSigningRequest({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/certificates.k8s.io/v1/watch/certificatesigningrequests/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getCoordinationAPIGroup() async {
    final result = await _getJsonMap('/apis/coordination.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getCoordinationV1APIResources() async {
    final result = await _getJsonMap('/apis/coordination.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind Lease.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_coordination_v1.LeaseList>
      listCoordinationV1LeaseForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/coordination.k8s.io/v1/leases$query');
    return api_coordination_v1.LeaseList.fromJson(result);
  }

  /// List or watch objects of kind Lease.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_coordination_v1.LeaseList> listCoordinationV1NamespacedLease({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases$query');
    return api_coordination_v1.LeaseList.fromJson(result);
  }

  /// Delete collection of Lease.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoordinationV1CollectionNamespacedLease({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a Lease.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_coordination_v1.Lease> createCoordinationV1NamespacedLease({
    required api_coordination_v1.Lease body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases$query',
        jsonBody);
    return api_coordination_v1.Lease.fromJson(result);
  }

  /// Read the specified Lease.
  ///
  /// [name] Name of the Lease.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_coordination_v1.Lease> readCoordinationV1NamespacedLease({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases/$name$query');
    return api_coordination_v1.Lease.fromJson(result);
  }

  /// Delete a Lease.
  ///
  /// [name] Name of the Lease.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteCoordinationV1NamespacedLease({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified Lease.
  ///
  /// [name] Name of the Lease.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_coordination_v1.Lease> replaceCoordinationV1NamespacedLease({
    required api_coordination_v1.Lease body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases/$name$query',
        jsonBody);
    return api_coordination_v1.Lease.fromJson(result);
  }

  /// Partially update the specified Lease.
  ///
  /// [name] Name of the Lease.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_coordination_v1.Lease> patchCoordinationV1NamespacedLease({
    required api_coordination_v1.Lease body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/coordination.k8s.io/v1/namespaces/$namespace/leases/$name$query',
        jsonBody,
        patchType);
    return api_coordination_v1.Lease.fromJson(result);
  }

  /// Watch individual changes to a list of Lease.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoordinationV1LeaseListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/coordination.k8s.io/v1/watch/leases$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Lease.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoordinationV1NamespacedLeaseList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/coordination.k8s.io/v1/watch/namespaces/$namespace/leases$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind Lease. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the Lease.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchCoordinationV1NamespacedLease({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/coordination.k8s.io/v1/watch/namespaces/$namespace/leases/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getDiscoveryAPIGroup() async {
    final result = await _getJsonMap('/apis/discovery.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getDiscoveryV1APIResources() async {
    final result = await _getJsonMap('/apis/discovery.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind EndpointSlice.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_discovery_v1.EndpointSliceList>
      listDiscoveryV1EndpointSliceForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/discovery.k8s.io/v1/endpointslices$query');
    return api_discovery_v1.EndpointSliceList.fromJson(result);
  }

  /// List or watch objects of kind EndpointSlice.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1.EndpointSliceList>
      listDiscoveryV1NamespacedEndpointSlice({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices$query');
    return api_discovery_v1.EndpointSliceList.fromJson(result);
  }

  /// Delete collection of EndpointSlice.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteDiscoveryV1CollectionNamespacedEndpointSlice({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create an EndpointSlice.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1.EndpointSlice>
      createDiscoveryV1NamespacedEndpointSlice({
    required api_discovery_v1.EndpointSlice body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices$query',
        jsonBody);
    return api_discovery_v1.EndpointSlice.fromJson(result);
  }

  /// Read the specified EndpointSlice.
  ///
  /// [name] Name of the EndpointSlice.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1.EndpointSlice>
      readDiscoveryV1NamespacedEndpointSlice({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices/$name$query');
    return api_discovery_v1.EndpointSlice.fromJson(result);
  }

  /// Delete an EndpointSlice.
  ///
  /// [name] Name of the EndpointSlice.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteDiscoveryV1NamespacedEndpointSlice({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified EndpointSlice.
  ///
  /// [name] Name of the EndpointSlice.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1.EndpointSlice>
      replaceDiscoveryV1NamespacedEndpointSlice({
    required api_discovery_v1.EndpointSlice body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices/$name$query',
        jsonBody);
    return api_discovery_v1.EndpointSlice.fromJson(result);
  }

  /// Partially update the specified EndpointSlice.
  ///
  /// [name] Name of the EndpointSlice.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_discovery_v1.EndpointSlice>
      patchDiscoveryV1NamespacedEndpointSlice({
    required api_discovery_v1.EndpointSlice body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/discovery.k8s.io/v1/namespaces/$namespace/endpointslices/$name$query',
        jsonBody,
        patchType);
    return api_discovery_v1.EndpointSlice.fromJson(result);
  }

  /// Watch individual changes to a list of EndpointSlice.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchDiscoveryV1EndpointSliceListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1/watch/endpointslices$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of EndpointSlice.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchDiscoveryV1NamespacedEndpointSliceList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1/watch/namespaces/$namespace/endpointslices$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind EndpointSlice. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the EndpointSlice.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchDiscoveryV1NamespacedEndpointSlice({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/discovery.k8s.io/v1/watch/namespaces/$namespace/endpointslices/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getEventsAPIGroup() async {
    final result = await _getJsonMap('/apis/events.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getEventsV1APIResources() async {
    final result = await _getJsonMap('/apis/events.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind Event.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_events_v1.EventList> listEventsV1EventForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/events.k8s.io/v1/events$query');
    return api_events_v1.EventList.fromJson(result);
  }

  /// List or watch objects of kind Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1.EventList> listEventsV1NamespacedEvent({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events$query');
    return api_events_v1.EventList.fromJson(result);
  }

  /// Delete collection of Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteEventsV1CollectionNamespacedEvent({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create an Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1.Event> createEventsV1NamespacedEvent({
    required api_events_v1.Event body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events$query', jsonBody);
    return api_events_v1.Event.fromJson(result);
  }

  /// Read the specified Event.
  ///
  /// [name] Name of the Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1.Event> readEventsV1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events/$name$query');
    return api_events_v1.Event.fromJson(result);
  }

  /// Delete an Event.
  ///
  /// [name] Name of the Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteEventsV1NamespacedEvent({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified Event.
  ///
  /// [name] Name of the Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1.Event> replaceEventsV1NamespacedEvent({
    required api_events_v1.Event body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events/$name$query',
        jsonBody);
    return api_events_v1.Event.fromJson(result);
  }

  /// Partially update the specified Event.
  ///
  /// [name] Name of the Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_events_v1.Event> patchEventsV1NamespacedEvent({
    required api_events_v1.Event body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/events.k8s.io/v1/namespaces/$namespace/events/$name$query',
        jsonBody,
        patchType);
    return api_events_v1.Event.fromJson(result);
  }

  /// Watch individual changes to a list of Event.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchEventsV1EventListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/events.k8s.io/v1/watch/events$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Event.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchEventsV1NamespacedEventList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1/watch/namespaces/$namespace/events$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind Event. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the Event.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchEventsV1NamespacedEvent({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/events.k8s.io/v1/watch/namespaces/$namespace/events/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getFlowcontrolApiserverAPIGroup() async {
    final result = await _getJsonMap('/apis/flowcontrol.apiserver.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getFlowcontrolApiserverV1beta1APIResources() async {
    final result =
        await _getJsonMap('/apis/flowcontrol.apiserver.k8s.io/v1beta1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.FlowSchemaList>
      listFlowcontrolApiserverV1beta1FlowSchema({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas$query');
    return api_flowcontrol_v1beta3.FlowSchemaList.fromJson(result);
  }

  /// Delete collection of FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteFlowcontrolApiserverV1beta1CollectionFlowSchema({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.FlowSchema>
      createFlowcontrolApiserverV1beta1FlowSchema({
    required api_flowcontrol_v1beta3.FlowSchema body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas$query',
        jsonBody);
    return api_flowcontrol_v1beta3.FlowSchema.fromJson(result);
  }

  /// Read the specified FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.FlowSchema>
      readFlowcontrolApiserverV1beta1FlowSchema({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name$query');
    return api_flowcontrol_v1beta3.FlowSchema.fromJson(result);
  }

  /// Delete a FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteFlowcontrolApiserverV1beta1FlowSchema({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.FlowSchema>
      replaceFlowcontrolApiserverV1beta1FlowSchema({
    required api_flowcontrol_v1beta3.FlowSchema body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name$query',
        jsonBody);
    return api_flowcontrol_v1beta3.FlowSchema.fromJson(result);
  }

  /// Partially update the specified FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.FlowSchema>
      patchFlowcontrolApiserverV1beta1FlowSchema({
    required api_flowcontrol_v1beta3.FlowSchema body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name$query',
        jsonBody,
        patchType);
    return api_flowcontrol_v1beta3.FlowSchema.fromJson(result);
  }

  /// Read status of the specified FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.FlowSchema>
      readFlowcontrolApiserverV1beta1FlowSchemaStatus({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name/status$query');
    return api_flowcontrol_v1beta3.FlowSchema.fromJson(result);
  }

  /// Replace status of the specified FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.FlowSchema>
      replaceFlowcontrolApiserverV1beta1FlowSchemaStatus({
    required api_flowcontrol_v1beta3.FlowSchema body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name/status$query',
        jsonBody);
    return api_flowcontrol_v1beta3.FlowSchema.fromJson(result);
  }

  /// Partially update status of the specified FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.FlowSchema>
      patchFlowcontrolApiserverV1beta1FlowSchemaStatus({
    required api_flowcontrol_v1beta3.FlowSchema body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/flowschemas/$name/status$query',
        jsonBody,
        patchType);
    return api_flowcontrol_v1beta3.FlowSchema.fromJson(result);
  }

  /// List or watch objects of kind PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.PriorityLevelConfigurationList>
      listFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations$query');
    return api_flowcontrol_v1beta3.PriorityLevelConfigurationList.fromJson(
        result);
  }

  /// Delete collection of PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteFlowcontrolApiserverV1beta1CollectionPriorityLevelConfiguration({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.PriorityLevelConfiguration>
      createFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    required api_flowcontrol_v1beta3.PriorityLevelConfiguration body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations$query',
        jsonBody);
    return api_flowcontrol_v1beta3.PriorityLevelConfiguration.fromJson(result);
  }

  /// Read the specified PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.PriorityLevelConfiguration>
      readFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name$query');
    return api_flowcontrol_v1beta3.PriorityLevelConfiguration.fromJson(result);
  }

  /// Delete a PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.PriorityLevelConfiguration>
      replaceFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    required api_flowcontrol_v1beta3.PriorityLevelConfiguration body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name$query',
        jsonBody);
    return api_flowcontrol_v1beta3.PriorityLevelConfiguration.fromJson(result);
  }

  /// Partially update the specified PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.PriorityLevelConfiguration>
      patchFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    required api_flowcontrol_v1beta3.PriorityLevelConfiguration body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name$query',
        jsonBody,
        patchType);
    return api_flowcontrol_v1beta3.PriorityLevelConfiguration.fromJson(result);
  }

  /// Read status of the specified PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.PriorityLevelConfiguration>
      readFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name/status$query');
    return api_flowcontrol_v1beta3.PriorityLevelConfiguration.fromJson(result);
  }

  /// Replace status of the specified PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.PriorityLevelConfiguration>
      replaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus({
    required api_flowcontrol_v1beta3.PriorityLevelConfiguration body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name/status$query',
        jsonBody);
    return api_flowcontrol_v1beta3.PriorityLevelConfiguration.fromJson(result);
  }

  /// Partially update status of the specified PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta3.PriorityLevelConfiguration>
      patchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus({
    required api_flowcontrol_v1beta3.PriorityLevelConfiguration body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/prioritylevelconfigurations/$name/status$query',
        jsonBody,
        patchType);
    return api_flowcontrol_v1beta3.PriorityLevelConfiguration.fromJson(result);
  }

  /// Watch individual changes to a list of FlowSchema.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchFlowcontrolApiserverV1beta1FlowSchemaList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/flowschemas$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind FlowSchema. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchFlowcontrolApiserverV1beta1FlowSchema({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/flowschemas/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of PriorityLevelConfiguration.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchFlowcontrolApiserverV1beta1PriorityLevelConfigurationList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/prioritylevelconfigurations$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind PriorityLevelConfiguration. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchFlowcontrolApiserverV1beta1PriorityLevelConfiguration({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta1/watch/prioritylevelconfigurations/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getFlowcontrolApiserverV1beta2APIResources() async {
    final result =
        await _getJsonMap('/apis/flowcontrol.apiserver.k8s.io/v1beta2/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.FlowSchemaList>
      listFlowcontrolApiserverV1beta2FlowSchema({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas$query');
    return api_flowcontrol_v1beta2.FlowSchemaList.fromJson(result);
  }

  /// Delete collection of FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteFlowcontrolApiserverV1beta2CollectionFlowSchema({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.FlowSchema>
      createFlowcontrolApiserverV1beta2FlowSchema({
    required api_flowcontrol_v1beta2.FlowSchema body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas$query',
        jsonBody);
    return api_flowcontrol_v1beta2.FlowSchema.fromJson(result);
  }

  /// Read the specified FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.FlowSchema>
      readFlowcontrolApiserverV1beta2FlowSchema({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/$name$query');
    return api_flowcontrol_v1beta2.FlowSchema.fromJson(result);
  }

  /// Delete a FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteFlowcontrolApiserverV1beta2FlowSchema({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.FlowSchema>
      replaceFlowcontrolApiserverV1beta2FlowSchema({
    required api_flowcontrol_v1beta2.FlowSchema body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/$name$query',
        jsonBody);
    return api_flowcontrol_v1beta2.FlowSchema.fromJson(result);
  }

  /// Partially update the specified FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.FlowSchema>
      patchFlowcontrolApiserverV1beta2FlowSchema({
    required api_flowcontrol_v1beta2.FlowSchema body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/$name$query',
        jsonBody,
        patchType);
    return api_flowcontrol_v1beta2.FlowSchema.fromJson(result);
  }

  /// Read status of the specified FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.FlowSchema>
      readFlowcontrolApiserverV1beta2FlowSchemaStatus({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/$name/status$query');
    return api_flowcontrol_v1beta2.FlowSchema.fromJson(result);
  }

  /// Replace status of the specified FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.FlowSchema>
      replaceFlowcontrolApiserverV1beta2FlowSchemaStatus({
    required api_flowcontrol_v1beta2.FlowSchema body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/$name/status$query',
        jsonBody);
    return api_flowcontrol_v1beta2.FlowSchema.fromJson(result);
  }

  /// Partially update status of the specified FlowSchema.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.FlowSchema>
      patchFlowcontrolApiserverV1beta2FlowSchemaStatus({
    required api_flowcontrol_v1beta2.FlowSchema body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/$name/status$query',
        jsonBody,
        patchType);
    return api_flowcontrol_v1beta2.FlowSchema.fromJson(result);
  }

  /// List or watch objects of kind PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.PriorityLevelConfigurationList>
      listFlowcontrolApiserverV1beta2PriorityLevelConfiguration({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations$query');
    return api_flowcontrol_v1beta2.PriorityLevelConfigurationList.fromJson(
        result);
  }

  /// Delete collection of PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfiguration({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.PriorityLevelConfiguration>
      createFlowcontrolApiserverV1beta2PriorityLevelConfiguration({
    required api_flowcontrol_v1beta2.PriorityLevelConfiguration body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations$query',
        jsonBody);
    return api_flowcontrol_v1beta2.PriorityLevelConfiguration.fromJson(result);
  }

  /// Read the specified PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.PriorityLevelConfiguration>
      readFlowcontrolApiserverV1beta2PriorityLevelConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/$name$query');
    return api_flowcontrol_v1beta2.PriorityLevelConfiguration.fromJson(result);
  }

  /// Delete a PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteFlowcontrolApiserverV1beta2PriorityLevelConfiguration({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.PriorityLevelConfiguration>
      replaceFlowcontrolApiserverV1beta2PriorityLevelConfiguration({
    required api_flowcontrol_v1beta2.PriorityLevelConfiguration body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/$name$query',
        jsonBody);
    return api_flowcontrol_v1beta2.PriorityLevelConfiguration.fromJson(result);
  }

  /// Partially update the specified PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.PriorityLevelConfiguration>
      patchFlowcontrolApiserverV1beta2PriorityLevelConfiguration({
    required api_flowcontrol_v1beta2.PriorityLevelConfiguration body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/$name$query',
        jsonBody,
        patchType);
    return api_flowcontrol_v1beta2.PriorityLevelConfiguration.fromJson(result);
  }

  /// Read status of the specified PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.PriorityLevelConfiguration>
      readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/$name/status$query');
    return api_flowcontrol_v1beta2.PriorityLevelConfiguration.fromJson(result);
  }

  /// Replace status of the specified PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.PriorityLevelConfiguration>
      replaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus({
    required api_flowcontrol_v1beta2.PriorityLevelConfiguration body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/$name/status$query',
        jsonBody);
    return api_flowcontrol_v1beta2.PriorityLevelConfiguration.fromJson(result);
  }

  /// Partially update status of the specified PriorityLevelConfiguration.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_flowcontrol_v1beta2.PriorityLevelConfiguration>
      patchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus({
    required api_flowcontrol_v1beta2.PriorityLevelConfiguration body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/$name/status$query',
        jsonBody,
        patchType);
    return api_flowcontrol_v1beta2.PriorityLevelConfiguration.fromJson(result);
  }

  /// Watch individual changes to a list of FlowSchema.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchFlowcontrolApiserverV1beta2FlowSchemaList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind FlowSchema. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the FlowSchema.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchFlowcontrolApiserverV1beta2FlowSchema({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of PriorityLevelConfiguration.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind PriorityLevelConfiguration. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the PriorityLevelConfiguration.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchFlowcontrolApiserverV1beta2PriorityLevelConfiguration({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getInternalApiserverAPIGroup() async {
    final result = await _getJsonMap('/apis/internal.apiserver.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getInternalApiserverV1alpha1APIResources() async {
    final result =
        await _getJsonMap('/apis/internal.apiserver.k8s.io/v1alpha1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind StorageVersion.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersionList>
      listInternalApiserverV1alpha1StorageVersion({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions$query');
    return api_apiserverinternal_v1alpha1.StorageVersionList.fromJson(result);
  }

  /// Delete collection of StorageVersion.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteInternalApiserverV1alpha1CollectionStorageVersion({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a StorageVersion.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      createInternalApiserverV1alpha1StorageVersion({
    required api_apiserverinternal_v1alpha1.StorageVersion body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions$query',
        jsonBody);
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// Read the specified StorageVersion.
  ///
  /// [name] Name of the StorageVersion.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      readInternalApiserverV1alpha1StorageVersion({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name$query');
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// Delete a StorageVersion.
  ///
  /// [name] Name of the StorageVersion.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteInternalApiserverV1alpha1StorageVersion({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified StorageVersion.
  ///
  /// [name] Name of the StorageVersion.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      replaceInternalApiserverV1alpha1StorageVersion({
    required api_apiserverinternal_v1alpha1.StorageVersion body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name$query',
        jsonBody);
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// Partially update the specified StorageVersion.
  ///
  /// [name] Name of the StorageVersion.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      patchInternalApiserverV1alpha1StorageVersion({
    required api_apiserverinternal_v1alpha1.StorageVersion body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name$query',
        jsonBody,
        patchType);
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// Read status of the specified StorageVersion.
  ///
  /// [name] Name of the StorageVersion.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      readInternalApiserverV1alpha1StorageVersionStatus({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name/status$query');
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// Replace status of the specified StorageVersion.
  ///
  /// [name] Name of the StorageVersion.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      replaceInternalApiserverV1alpha1StorageVersionStatus({
    required api_apiserverinternal_v1alpha1.StorageVersion body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name/status$query',
        jsonBody);
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// Partially update status of the specified StorageVersion.
  ///
  /// [name] Name of the StorageVersion.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_apiserverinternal_v1alpha1.StorageVersion>
      patchInternalApiserverV1alpha1StorageVersionStatus({
    required api_apiserverinternal_v1alpha1.StorageVersion body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/$name/status$query',
        jsonBody,
        patchType);
    return api_apiserverinternal_v1alpha1.StorageVersion.fromJson(result);
  }

  /// Watch individual changes to a list of StorageVersion.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchInternalApiserverV1alpha1StorageVersionList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind StorageVersion. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the StorageVersion.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchInternalApiserverV1alpha1StorageVersion({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getNetworkingAPIGroup() async {
    final result = await _getJsonMap('/apis/networking.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getNetworkingV1APIResources() async {
    final result = await _getJsonMap('/apis/networking.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind IngressClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.IngressClassList> listNetworkingV1IngressClass({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/networking.k8s.io/v1/ingressclasses$query');
    return api_networking_v1.IngressClassList.fromJson(result);
  }

  /// Delete collection of IngressClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNetworkingV1CollectionIngressClass({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/apis/networking.k8s.io/v1/ingressclasses$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create an IngressClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.IngressClass> createNetworkingV1IngressClass({
    required api_networking_v1.IngressClass body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/networking.k8s.io/v1/ingressclasses$query', jsonBody);
    return api_networking_v1.IngressClass.fromJson(result);
  }

  /// Read the specified IngressClass.
  ///
  /// [name] Name of the IngressClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.IngressClass> readNetworkingV1IngressClass({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/ingressclasses/$name$query');
    return api_networking_v1.IngressClass.fromJson(result);
  }

  /// Delete an IngressClass.
  ///
  /// [name] Name of the IngressClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteNetworkingV1IngressClass({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/networking.k8s.io/v1/ingressclasses/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified IngressClass.
  ///
  /// [name] Name of the IngressClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.IngressClass> replaceNetworkingV1IngressClass({
    required api_networking_v1.IngressClass body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/networking.k8s.io/v1/ingressclasses/$name$query', jsonBody);
    return api_networking_v1.IngressClass.fromJson(result);
  }

  /// Partially update the specified IngressClass.
  ///
  /// [name] Name of the IngressClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.IngressClass> patchNetworkingV1IngressClass({
    required api_networking_v1.IngressClass body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/networking.k8s.io/v1/ingressclasses/$name$query',
        jsonBody,
        patchType);
    return api_networking_v1.IngressClass.fromJson(result);
  }

  /// List or watch objects of kind Ingress.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_networking_v1.IngressList>
      listNetworkingV1IngressForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/networking.k8s.io/v1/ingresses$query');
    return api_networking_v1.IngressList.fromJson(result);
  }

  /// List or watch objects of kind Ingress.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.IngressList> listNetworkingV1NamespacedIngress({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses$query');
    return api_networking_v1.IngressList.fromJson(result);
  }

  /// Delete collection of Ingress.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNetworkingV1CollectionNamespacedIngress({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create an Ingress.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> createNetworkingV1NamespacedIngress({
    required api_networking_v1.Ingress body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses$query',
        jsonBody);
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// Read the specified Ingress.
  ///
  /// [name] Name of the Ingress.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> readNetworkingV1NamespacedIngress({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name$query');
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// Delete an Ingress.
  ///
  /// [name] Name of the Ingress.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNetworkingV1NamespacedIngress({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified Ingress.
  ///
  /// [name] Name of the Ingress.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> replaceNetworkingV1NamespacedIngress({
    required api_networking_v1.Ingress body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name$query',
        jsonBody);
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// Partially update the specified Ingress.
  ///
  /// [name] Name of the Ingress.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> patchNetworkingV1NamespacedIngress({
    required api_networking_v1.Ingress body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name$query',
        jsonBody,
        patchType);
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// Read status of the specified Ingress.
  ///
  /// [name] Name of the Ingress.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> readNetworkingV1NamespacedIngressStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name/status$query');
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// Replace status of the specified Ingress.
  ///
  /// [name] Name of the Ingress.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> replaceNetworkingV1NamespacedIngressStatus({
    required api_networking_v1.Ingress body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name/status$query',
        jsonBody);
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// Partially update status of the specified Ingress.
  ///
  /// [name] Name of the Ingress.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.Ingress> patchNetworkingV1NamespacedIngressStatus({
    required api_networking_v1.Ingress body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/ingresses/$name/status$query',
        jsonBody,
        patchType);
    return api_networking_v1.Ingress.fromJson(result);
  }

  /// List or watch objects of kind NetworkPolicy.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.NetworkPolicyList>
      listNetworkingV1NamespacedNetworkPolicy({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies$query');
    return api_networking_v1.NetworkPolicyList.fromJson(result);
  }

  /// Delete collection of NetworkPolicy.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNetworkingV1CollectionNamespacedNetworkPolicy({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a NetworkPolicy.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.NetworkPolicy>
      createNetworkingV1NamespacedNetworkPolicy({
    required api_networking_v1.NetworkPolicy body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies$query',
        jsonBody);
    return api_networking_v1.NetworkPolicy.fromJson(result);
  }

  /// Read the specified NetworkPolicy.
  ///
  /// [name] Name of the NetworkPolicy.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.NetworkPolicy>
      readNetworkingV1NamespacedNetworkPolicy({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies/$name$query');
    return api_networking_v1.NetworkPolicy.fromJson(result);
  }

  /// Delete a NetworkPolicy.
  ///
  /// [name] Name of the NetworkPolicy.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNetworkingV1NamespacedNetworkPolicy({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified NetworkPolicy.
  ///
  /// [name] Name of the NetworkPolicy.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.NetworkPolicy>
      replaceNetworkingV1NamespacedNetworkPolicy({
    required api_networking_v1.NetworkPolicy body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies/$name$query',
        jsonBody);
    return api_networking_v1.NetworkPolicy.fromJson(result);
  }

  /// Partially update the specified NetworkPolicy.
  ///
  /// [name] Name of the NetworkPolicy.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.NetworkPolicy>
      patchNetworkingV1NamespacedNetworkPolicy({
    required api_networking_v1.NetworkPolicy body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies/$name$query',
        jsonBody,
        patchType);
    return api_networking_v1.NetworkPolicy.fromJson(result);
  }

  /// Read status of the specified NetworkPolicy.
  ///
  /// [name] Name of the NetworkPolicy.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.NetworkPolicy>
      readNetworkingV1NamespacedNetworkPolicyStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies/$name/status$query');
    return api_networking_v1.NetworkPolicy.fromJson(result);
  }

  /// Replace status of the specified NetworkPolicy.
  ///
  /// [name] Name of the NetworkPolicy.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.NetworkPolicy>
      replaceNetworkingV1NamespacedNetworkPolicyStatus({
    required api_networking_v1.NetworkPolicy body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies/$name/status$query',
        jsonBody);
    return api_networking_v1.NetworkPolicy.fromJson(result);
  }

  /// Partially update status of the specified NetworkPolicy.
  ///
  /// [name] Name of the NetworkPolicy.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_networking_v1.NetworkPolicy>
      patchNetworkingV1NamespacedNetworkPolicyStatus({
    required api_networking_v1.NetworkPolicy body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/networking.k8s.io/v1/namespaces/$namespace/networkpolicies/$name/status$query',
        jsonBody,
        patchType);
    return api_networking_v1.NetworkPolicy.fromJson(result);
  }

  /// List or watch objects of kind NetworkPolicy.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_networking_v1.NetworkPolicyList>
      listNetworkingV1NetworkPolicyForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/networking.k8s.io/v1/networkpolicies$query');
    return api_networking_v1.NetworkPolicyList.fromJson(result);
  }

  /// Watch individual changes to a list of IngressClass.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1IngressClassList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/ingressclasses$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind IngressClass. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the IngressClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1IngressClass({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/ingressclasses/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Ingress.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1IngressListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/networking.k8s.io/v1/watch/ingresses$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Ingress.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1NamespacedIngressList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/namespaces/$namespace/ingresses$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind Ingress. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the Ingress.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1NamespacedIngress({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/namespaces/$namespace/ingresses/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of NetworkPolicy.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1NamespacedNetworkPolicyList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/namespaces/$namespace/networkpolicies$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind NetworkPolicy. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the NetworkPolicy.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1NamespacedNetworkPolicy({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/namespaces/$namespace/networkpolicies/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of NetworkPolicy.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchNetworkingV1NetworkPolicyListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/networking.k8s.io/v1/watch/networkpolicies$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getNodeAPIGroup() async {
    final result = await _getJsonMap('/apis/node.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getNodeV1APIResources() async {
    final result = await _getJsonMap('/apis/node.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind RuntimeClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1.RuntimeClassList> listNodeV1RuntimeClass({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/node.k8s.io/v1/runtimeclasses$query');
    return api_node_v1.RuntimeClassList.fromJson(result);
  }

  /// Delete collection of RuntimeClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteNodeV1CollectionRuntimeClass({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/apis/node.k8s.io/v1/runtimeclasses$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a RuntimeClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1.RuntimeClass> createNodeV1RuntimeClass({
    required api_node_v1.RuntimeClass body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/node.k8s.io/v1/runtimeclasses$query', jsonBody);
    return api_node_v1.RuntimeClass.fromJson(result);
  }

  /// Read the specified RuntimeClass.
  ///
  /// [name] Name of the RuntimeClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1.RuntimeClass> readNodeV1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/node.k8s.io/v1/runtimeclasses/$name$query');
    return api_node_v1.RuntimeClass.fromJson(result);
  }

  /// Delete a RuntimeClass.
  ///
  /// [name] Name of the RuntimeClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteNodeV1RuntimeClass({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/apis/node.k8s.io/v1/runtimeclasses/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified RuntimeClass.
  ///
  /// [name] Name of the RuntimeClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1.RuntimeClass> replaceNodeV1RuntimeClass({
    required api_node_v1.RuntimeClass body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/node.k8s.io/v1/runtimeclasses/$name$query', jsonBody);
    return api_node_v1.RuntimeClass.fromJson(result);
  }

  /// Partially update the specified RuntimeClass.
  ///
  /// [name] Name of the RuntimeClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_node_v1.RuntimeClass> patchNodeV1RuntimeClass({
    required api_node_v1.RuntimeClass body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/node.k8s.io/v1/runtimeclasses/$name$query', jsonBody, patchType);
    return api_node_v1.RuntimeClass.fromJson(result);
  }

  /// Watch individual changes to a list of RuntimeClass.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchNodeV1RuntimeClassList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/node.k8s.io/v1/watch/runtimeclasses$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind RuntimeClass. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the RuntimeClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchNodeV1RuntimeClass({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/node.k8s.io/v1/watch/runtimeclasses/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getPolicyAPIGroup() async {
    final result = await _getJsonMap('/apis/policy/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getPolicyV1APIResources() async {
    final result = await _getJsonMap('/apis/policy/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind PodDisruptionBudget.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudgetList>
      listPolicyV1NamespacedPodDisruptionBudget({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets$query');
    return api_policy_v1.PodDisruptionBudgetList.fromJson(result);
  }

  /// Delete collection of PodDisruptionBudget.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deletePolicyV1CollectionNamespacedPodDisruptionBudget({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a PodDisruptionBudget.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      createPolicyV1NamespacedPodDisruptionBudget({
    required api_policy_v1.PodDisruptionBudget body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets$query',
        jsonBody);
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// Read the specified PodDisruptionBudget.
  ///
  /// [name] Name of the PodDisruptionBudget.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      readPolicyV1NamespacedPodDisruptionBudget({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name$query');
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// Delete a PodDisruptionBudget.
  ///
  /// [name] Name of the PodDisruptionBudget.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deletePolicyV1NamespacedPodDisruptionBudget({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified PodDisruptionBudget.
  ///
  /// [name] Name of the PodDisruptionBudget.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      replacePolicyV1NamespacedPodDisruptionBudget({
    required api_policy_v1.PodDisruptionBudget body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name$query',
        jsonBody);
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// Partially update the specified PodDisruptionBudget.
  ///
  /// [name] Name of the PodDisruptionBudget.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      patchPolicyV1NamespacedPodDisruptionBudget({
    required api_policy_v1.PodDisruptionBudget body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name$query',
        jsonBody,
        patchType);
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// Read status of the specified PodDisruptionBudget.
  ///
  /// [name] Name of the PodDisruptionBudget.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      readPolicyV1NamespacedPodDisruptionBudgetStatus({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name/status$query');
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// Replace status of the specified PodDisruptionBudget.
  ///
  /// [name] Name of the PodDisruptionBudget.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      replacePolicyV1NamespacedPodDisruptionBudgetStatus({
    required api_policy_v1.PodDisruptionBudget body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name/status$query',
        jsonBody);
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// Partially update status of the specified PodDisruptionBudget.
  ///
  /// [name] Name of the PodDisruptionBudget.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_policy_v1.PodDisruptionBudget>
      patchPolicyV1NamespacedPodDisruptionBudgetStatus({
    required api_policy_v1.PodDisruptionBudget body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/policy/v1/namespaces/$namespace/poddisruptionbudgets/$name/status$query',
        jsonBody,
        patchType);
    return api_policy_v1.PodDisruptionBudget.fromJson(result);
  }

  /// List or watch objects of kind PodDisruptionBudget.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_policy_v1.PodDisruptionBudgetList>
      listPolicyV1PodDisruptionBudgetForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/policy/v1/poddisruptionbudgets$query');
    return api_policy_v1.PodDisruptionBudgetList.fromJson(result);
  }

  /// Watch individual changes to a list of PodDisruptionBudget.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchPolicyV1NamespacedPodDisruptionBudgetList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/policy/v1/watch/namespaces/$namespace/poddisruptionbudgets$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind PodDisruptionBudget. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the PodDisruptionBudget.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchPolicyV1NamespacedPodDisruptionBudget({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/policy/v1/watch/namespaces/$namespace/poddisruptionbudgets/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of PodDisruptionBudget.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchPolicyV1PodDisruptionBudgetListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/policy/v1/watch/poddisruptionbudgets$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup>
      getRbacAuthorizationAPIGroup() async {
    final result = await _getJsonMap('/apis/rbac.authorization.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getRbacAuthorizationV1APIResources() async {
    final result = await _getJsonMap('/apis/rbac.authorization.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind ClusterRoleBinding.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRoleBindingList>
      listRbacAuthorizationV1ClusterRoleBinding({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings$query');
    return api_rbac_v1.ClusterRoleBindingList.fromJson(result);
  }

  /// Delete collection of ClusterRoleBinding.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1CollectionClusterRoleBinding({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a ClusterRoleBinding.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRoleBinding>
      createRbacAuthorizationV1ClusterRoleBinding({
    required api_rbac_v1.ClusterRoleBinding body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings$query',
        jsonBody);
    return api_rbac_v1.ClusterRoleBinding.fromJson(result);
  }

  /// Read the specified ClusterRoleBinding.
  ///
  /// [name] Name of the ClusterRoleBinding.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRoleBinding>
      readRbacAuthorizationV1ClusterRoleBinding({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/$name$query');
    return api_rbac_v1.ClusterRoleBinding.fromJson(result);
  }

  /// Delete a ClusterRoleBinding.
  ///
  /// [name] Name of the ClusterRoleBinding.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1ClusterRoleBinding({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified ClusterRoleBinding.
  ///
  /// [name] Name of the ClusterRoleBinding.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRoleBinding>
      replaceRbacAuthorizationV1ClusterRoleBinding({
    required api_rbac_v1.ClusterRoleBinding body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/$name$query',
        jsonBody);
    return api_rbac_v1.ClusterRoleBinding.fromJson(result);
  }

  /// Partially update the specified ClusterRoleBinding.
  ///
  /// [name] Name of the ClusterRoleBinding.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRoleBinding>
      patchRbacAuthorizationV1ClusterRoleBinding({
    required api_rbac_v1.ClusterRoleBinding body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/$name$query',
        jsonBody,
        patchType);
    return api_rbac_v1.ClusterRoleBinding.fromJson(result);
  }

  /// List or watch objects of kind ClusterRole.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRoleList> listRbacAuthorizationV1ClusterRole({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles$query');
    return api_rbac_v1.ClusterRoleList.fromJson(result);
  }

  /// Delete collection of ClusterRole.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1CollectionClusterRole({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a ClusterRole.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRole> createRbacAuthorizationV1ClusterRole({
    required api_rbac_v1.ClusterRole body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles$query', jsonBody);
    return api_rbac_v1.ClusterRole.fromJson(result);
  }

  /// Read the specified ClusterRole.
  ///
  /// [name] Name of the ClusterRole.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRole> readRbacAuthorizationV1ClusterRole({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles/$name$query');
    return api_rbac_v1.ClusterRole.fromJson(result);
  }

  /// Delete a ClusterRole.
  ///
  /// [name] Name of the ClusterRole.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1ClusterRole({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified ClusterRole.
  ///
  /// [name] Name of the ClusterRole.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRole> replaceRbacAuthorizationV1ClusterRole({
    required api_rbac_v1.ClusterRole body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles/$name$query',
        jsonBody);
    return api_rbac_v1.ClusterRole.fromJson(result);
  }

  /// Partially update the specified ClusterRole.
  ///
  /// [name] Name of the ClusterRole.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.ClusterRole> patchRbacAuthorizationV1ClusterRole({
    required api_rbac_v1.ClusterRole body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/clusterroles/$name$query',
        jsonBody,
        patchType);
    return api_rbac_v1.ClusterRole.fromJson(result);
  }

  /// List or watch objects of kind RoleBinding.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.RoleBindingList>
      listRbacAuthorizationV1NamespacedRoleBinding({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings$query');
    return api_rbac_v1.RoleBindingList.fromJson(result);
  }

  /// Delete collection of RoleBinding.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1CollectionNamespacedRoleBinding({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a RoleBinding.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.RoleBinding>
      createRbacAuthorizationV1NamespacedRoleBinding({
    required api_rbac_v1.RoleBinding body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings$query',
        jsonBody);
    return api_rbac_v1.RoleBinding.fromJson(result);
  }

  /// Read the specified RoleBinding.
  ///
  /// [name] Name of the RoleBinding.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.RoleBinding> readRbacAuthorizationV1NamespacedRoleBinding({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings/$name$query');
    return api_rbac_v1.RoleBinding.fromJson(result);
  }

  /// Delete a RoleBinding.
  ///
  /// [name] Name of the RoleBinding.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1NamespacedRoleBinding({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified RoleBinding.
  ///
  /// [name] Name of the RoleBinding.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.RoleBinding>
      replaceRbacAuthorizationV1NamespacedRoleBinding({
    required api_rbac_v1.RoleBinding body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings/$name$query',
        jsonBody);
    return api_rbac_v1.RoleBinding.fromJson(result);
  }

  /// Partially update the specified RoleBinding.
  ///
  /// [name] Name of the RoleBinding.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.RoleBinding>
      patchRbacAuthorizationV1NamespacedRoleBinding({
    required api_rbac_v1.RoleBinding body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/rolebindings/$name$query',
        jsonBody,
        patchType);
    return api_rbac_v1.RoleBinding.fromJson(result);
  }

  /// List or watch objects of kind Role.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.RoleList> listRbacAuthorizationV1NamespacedRole({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles$query');
    return api_rbac_v1.RoleList.fromJson(result);
  }

  /// Delete collection of Role.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1CollectionNamespacedRole({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a Role.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.Role> createRbacAuthorizationV1NamespacedRole({
    required api_rbac_v1.Role body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles$query',
        jsonBody);
    return api_rbac_v1.Role.fromJson(result);
  }

  /// Read the specified Role.
  ///
  /// [name] Name of the Role.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.Role> readRbacAuthorizationV1NamespacedRole({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles/$name$query');
    return api_rbac_v1.Role.fromJson(result);
  }

  /// Delete a Role.
  ///
  /// [name] Name of the Role.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteRbacAuthorizationV1NamespacedRole({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified Role.
  ///
  /// [name] Name of the Role.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.Role> replaceRbacAuthorizationV1NamespacedRole({
    required api_rbac_v1.Role body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles/$name$query',
        jsonBody);
    return api_rbac_v1.Role.fromJson(result);
  }

  /// Partially update the specified Role.
  ///
  /// [name] Name of the Role.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_rbac_v1.Role> patchRbacAuthorizationV1NamespacedRole({
    required api_rbac_v1.Role body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/namespaces/$namespace/roles/$name$query',
        jsonBody,
        patchType);
    return api_rbac_v1.Role.fromJson(result);
  }

  /// List or watch objects of kind RoleBinding.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_rbac_v1.RoleBindingList>
      listRbacAuthorizationV1RoleBindingForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/rolebindings$query');
    return api_rbac_v1.RoleBindingList.fromJson(result);
  }

  /// List or watch objects of kind Role.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_rbac_v1.RoleList> listRbacAuthorizationV1RoleForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/rbac.authorization.k8s.io/v1/roles$query');
    return api_rbac_v1.RoleList.fromJson(result);
  }

  /// Watch individual changes to a list of ClusterRoleBinding.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1ClusterRoleBindingList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind ClusterRoleBinding. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the ClusterRoleBinding.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1ClusterRoleBinding({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of ClusterRole.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1ClusterRoleList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/clusterroles$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind ClusterRole. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the ClusterRole.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1ClusterRole({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/clusterroles/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of RoleBinding.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1NamespacedRoleBindingList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/namespaces/$namespace/rolebindings$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind RoleBinding. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the RoleBinding.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1NamespacedRoleBinding({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/namespaces/$namespace/rolebindings/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Role.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1NamespacedRoleList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/namespaces/$namespace/roles$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind Role. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the Role.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1NamespacedRole({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/namespaces/$namespace/roles/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of RoleBinding.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1RoleBindingListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/rolebindings$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of Role.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchRbacAuthorizationV1RoleListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/rbac.authorization.k8s.io/v1/watch/roles$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getSchedulingAPIGroup() async {
    final result = await _getJsonMap('/apis/scheduling.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getSchedulingV1APIResources() async {
    final result = await _getJsonMap('/apis/scheduling.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind PriorityClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1.PriorityClassList> listSchedulingV1PriorityClass({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/scheduling.k8s.io/v1/priorityclasses$query');
    return api_scheduling_v1.PriorityClassList.fromJson(result);
  }

  /// Delete collection of PriorityClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteSchedulingV1CollectionPriorityClass({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/scheduling.k8s.io/v1/priorityclasses$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a PriorityClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1.PriorityClass> createSchedulingV1PriorityClass({
    required api_scheduling_v1.PriorityClass body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/scheduling.k8s.io/v1/priorityclasses$query', jsonBody);
    return api_scheduling_v1.PriorityClass.fromJson(result);
  }

  /// Read the specified PriorityClass.
  ///
  /// [name] Name of the PriorityClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1.PriorityClass> readSchedulingV1PriorityClass({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/scheduling.k8s.io/v1/priorityclasses/$name$query');
    return api_scheduling_v1.PriorityClass.fromJson(result);
  }

  /// Delete a PriorityClass.
  ///
  /// [name] Name of the PriorityClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status> deleteSchedulingV1PriorityClass({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/scheduling.k8s.io/v1/priorityclasses/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified PriorityClass.
  ///
  /// [name] Name of the PriorityClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1.PriorityClass> replaceSchedulingV1PriorityClass({
    required api_scheduling_v1.PriorityClass body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/scheduling.k8s.io/v1/priorityclasses/$name$query', jsonBody);
    return api_scheduling_v1.PriorityClass.fromJson(result);
  }

  /// Partially update the specified PriorityClass.
  ///
  /// [name] Name of the PriorityClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_scheduling_v1.PriorityClass> patchSchedulingV1PriorityClass({
    required api_scheduling_v1.PriorityClass body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/scheduling.k8s.io/v1/priorityclasses/$name$query',
        jsonBody,
        patchType);
    return api_scheduling_v1.PriorityClass.fromJson(result);
  }

  /// Watch individual changes to a list of PriorityClass.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchSchedulingV1PriorityClassList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/scheduling.k8s.io/v1/watch/priorityclasses$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind PriorityClass. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the PriorityClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchSchedulingV1PriorityClass({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/scheduling.k8s.io/v1/watch/priorityclasses/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get information of a group.
  Future<apimachinery_pkg_apis_meta_v1.APIGroup> getStorageAPIGroup() async {
    final result = await _getJsonMap('/apis/storage.k8s.io/');
    return apimachinery_pkg_apis_meta_v1.APIGroup.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getStorageV1APIResources() async {
    final result = await _getJsonMap('/apis/storage.k8s.io/v1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// List or watch objects of kind CSIDriver.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIDriverList> listStorageV1CSIDriver({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/storage.k8s.io/v1/csidrivers$query');
    return api_storage_v1.CSIDriverList.fromJson(result);
  }

  /// Delete collection of CSIDriver.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1CollectionCSIDriver({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/apis/storage.k8s.io/v1/csidrivers$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a CSIDriver.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIDriver> createStorageV1CSIDriver({
    required api_storage_v1.CSIDriver body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/storage.k8s.io/v1/csidrivers$query', jsonBody);
    return api_storage_v1.CSIDriver.fromJson(result);
  }

  /// Read the specified CSIDriver.
  ///
  /// [name] Name of the CSIDriver.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIDriver> readStorageV1CSIDriver({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/storage.k8s.io/v1/csidrivers/$name$query');
    return api_storage_v1.CSIDriver.fromJson(result);
  }

  /// Delete a CSIDriver.
  ///
  /// [name] Name of the CSIDriver.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIDriver> deleteStorageV1CSIDriver({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/apis/storage.k8s.io/v1/csidrivers/$name$query');
    return api_storage_v1.CSIDriver.fromJson(result);
  }

  /// Replace the specified CSIDriver.
  ///
  /// [name] Name of the CSIDriver.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIDriver> replaceStorageV1CSIDriver({
    required api_storage_v1.CSIDriver body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1/csidrivers/$name$query', jsonBody);
    return api_storage_v1.CSIDriver.fromJson(result);
  }

  /// Partially update the specified CSIDriver.
  ///
  /// [name] Name of the CSIDriver.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIDriver> patchStorageV1CSIDriver({
    required api_storage_v1.CSIDriver body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1/csidrivers/$name$query', jsonBody, patchType);
    return api_storage_v1.CSIDriver.fromJson(result);
  }

  /// List or watch objects of kind CSINode.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSINodeList> listStorageV1CSINode({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap('/apis/storage.k8s.io/v1/csinodes$query');
    return api_storage_v1.CSINodeList.fromJson(result);
  }

  /// Delete collection of CSINode.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1CollectionCSINode({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/apis/storage.k8s.io/v1/csinodes$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a CSINode.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSINode> createStorageV1CSINode({
    required api_storage_v1.CSINode body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result =
        await _postJsonMap('/apis/storage.k8s.io/v1/csinodes$query', jsonBody);
    return api_storage_v1.CSINode.fromJson(result);
  }

  /// Read the specified CSINode.
  ///
  /// [name] Name of the CSINode.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSINode> readStorageV1CSINode({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/storage.k8s.io/v1/csinodes/$name$query');
    return api_storage_v1.CSINode.fromJson(result);
  }

  /// Delete a CSINode.
  ///
  /// [name] Name of the CSINode.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSINode> deleteStorageV1CSINode({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/apis/storage.k8s.io/v1/csinodes/$name$query');
    return api_storage_v1.CSINode.fromJson(result);
  }

  /// Replace the specified CSINode.
  ///
  /// [name] Name of the CSINode.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSINode> replaceStorageV1CSINode({
    required api_storage_v1.CSINode body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1/csinodes/$name$query', jsonBody);
    return api_storage_v1.CSINode.fromJson(result);
  }

  /// Partially update the specified CSINode.
  ///
  /// [name] Name of the CSINode.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSINode> patchStorageV1CSINode({
    required api_storage_v1.CSINode body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1/csinodes/$name$query', jsonBody, patchType);
    return api_storage_v1.CSINode.fromJson(result);
  }

  /// List or watch objects of kind CSIStorageCapacity.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  Future<api_storage_v1.CSIStorageCapacityList>
      listStorageV1CSIStorageCapacityForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/storage.k8s.io/v1/csistoragecapacities$query');
    return api_storage_v1.CSIStorageCapacityList.fromJson(result);
  }

  /// List or watch objects of kind CSIStorageCapacity.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIStorageCapacityList>
      listStorageV1NamespacedCSIStorageCapacity({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/namespaces/$namespace/csistoragecapacities$query');
    return api_storage_v1.CSIStorageCapacityList.fromJson(result);
  }

  /// Delete collection of CSIStorageCapacity.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1CollectionNamespacedCSIStorageCapacity({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1/namespaces/$namespace/csistoragecapacities$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a CSIStorageCapacity.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIStorageCapacity>
      createStorageV1NamespacedCSIStorageCapacity({
    required api_storage_v1.CSIStorageCapacity body,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/storage.k8s.io/v1/namespaces/$namespace/csistoragecapacities$query',
        jsonBody);
    return api_storage_v1.CSIStorageCapacity.fromJson(result);
  }

  /// Read the specified CSIStorageCapacity.
  ///
  /// [name] Name of the CSIStorageCapacity.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIStorageCapacity>
      readStorageV1NamespacedCSIStorageCapacity({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/namespaces/$namespace/csistoragecapacities/$name$query');
    return api_storage_v1.CSIStorageCapacity.fromJson(result);
  }

  /// Delete a CSIStorageCapacity.
  ///
  /// [name] Name of the CSIStorageCapacity.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1NamespacedCSIStorageCapacity({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1/namespaces/$namespace/csistoragecapacities/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Replace the specified CSIStorageCapacity.
  ///
  /// [name] Name of the CSIStorageCapacity.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIStorageCapacity>
      replaceStorageV1NamespacedCSIStorageCapacity({
    required api_storage_v1.CSIStorageCapacity body,
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1/namespaces/$namespace/csistoragecapacities/$name$query',
        jsonBody);
    return api_storage_v1.CSIStorageCapacity.fromJson(result);
  }

  /// Partially update the specified CSIStorageCapacity.
  ///
  /// [name] Name of the CSIStorageCapacity.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.CSIStorageCapacity>
      patchStorageV1NamespacedCSIStorageCapacity({
    required api_storage_v1.CSIStorageCapacity body,
    required String name,
    required String namespace,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1/namespaces/$namespace/csistoragecapacities/$name$query',
        jsonBody,
        patchType);
    return api_storage_v1.CSIStorageCapacity.fromJson(result);
  }

  /// List or watch objects of kind StorageClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.StorageClassList> listStorageV1StorageClass({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/storage.k8s.io/v1/storageclasses$query');
    return api_storage_v1.StorageClassList.fromJson(result);
  }

  /// Delete collection of StorageClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1CollectionStorageClass({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/apis/storage.k8s.io/v1/storageclasses$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a StorageClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.StorageClass> createStorageV1StorageClass({
    required api_storage_v1.StorageClass body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/storage.k8s.io/v1/storageclasses$query', jsonBody);
    return api_storage_v1.StorageClass.fromJson(result);
  }

  /// Read the specified StorageClass.
  ///
  /// [name] Name of the StorageClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.StorageClass> readStorageV1StorageClass({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/storage.k8s.io/v1/storageclasses/$name$query');
    return api_storage_v1.StorageClass.fromJson(result);
  }

  /// Delete a StorageClass.
  ///
  /// [name] Name of the StorageClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.StorageClass> deleteStorageV1StorageClass({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1/storageclasses/$name$query');
    return api_storage_v1.StorageClass.fromJson(result);
  }

  /// Replace the specified StorageClass.
  ///
  /// [name] Name of the StorageClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.StorageClass> replaceStorageV1StorageClass({
    required api_storage_v1.StorageClass body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1/storageclasses/$name$query', jsonBody);
    return api_storage_v1.StorageClass.fromJson(result);
  }

  /// Partially update the specified StorageClass.
  ///
  /// [name] Name of the StorageClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.StorageClass> patchStorageV1StorageClass({
    required api_storage_v1.StorageClass body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1/storageclasses/$name$query',
        jsonBody,
        patchType);
    return api_storage_v1.StorageClass.fromJson(result);
  }

  /// List or watch objects of kind VolumeAttachment.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachmentList> listStorageV1VolumeAttachment({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/storage.k8s.io/v1/volumeattachments$query');
    return api_storage_v1.VolumeAttachmentList.fromJson(result);
  }

  /// Delete collection of VolumeAttachment.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1CollectionVolumeAttachment({
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _deleteJsonMap('/apis/storage.k8s.io/v1/volumeattachments$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Create a VolumeAttachment.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> createStorageV1VolumeAttachment({
    required api_storage_v1.VolumeAttachment body,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _postJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments$query', jsonBody);
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// Read the specified VolumeAttachment.
  ///
  /// [name] Name of the VolumeAttachment.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> readStorageV1VolumeAttachment({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name$query');
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// Delete a VolumeAttachment.
  ///
  /// [name] Name of the VolumeAttachment.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> deleteStorageV1VolumeAttachment({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name$query');
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// Replace the specified VolumeAttachment.
  ///
  /// [name] Name of the VolumeAttachment.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> replaceStorageV1VolumeAttachment({
    required api_storage_v1.VolumeAttachment body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name$query', jsonBody);
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// Partially update the specified VolumeAttachment.
  ///
  /// [name] Name of the VolumeAttachment.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> patchStorageV1VolumeAttachment({
    required api_storage_v1.VolumeAttachment body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name$query',
        jsonBody,
        patchType);
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// Read status of the specified VolumeAttachment.
  ///
  /// [name] Name of the VolumeAttachment.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> readStorageV1VolumeAttachmentStatus({
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name/status$query');
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// Replace status of the specified VolumeAttachment.
  ///
  /// [name] Name of the VolumeAttachment.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment>
      replaceStorageV1VolumeAttachmentStatus({
    required api_storage_v1.VolumeAttachment body,
    required String name,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _putJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name/status$query',
        jsonBody);
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// Partially update status of the specified VolumeAttachment.
  ///
  /// [name] Name of the VolumeAttachment.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<api_storage_v1.VolumeAttachment> patchStorageV1VolumeAttachmentStatus({
    required api_storage_v1.VolumeAttachment body,
    required String name,
    bool? pretty,
    PatchType patchType = PatchType.mergePatch,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final jsonBody = jsonEncode(body.toJson());
    final result = await _patchJsonMap(
        '/apis/storage.k8s.io/v1/volumeattachments/$name/status$query',
        jsonBody,
        patchType);
    return api_storage_v1.VolumeAttachment.fromJson(result);
  }

  /// Watch individual changes to a list of CSIDriver.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchStorageV1CSIDriverList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/storage.k8s.io/v1/watch/csidrivers$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind CSIDriver. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the CSIDriver.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchStorageV1CSIDriver({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/csidrivers/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of CSINode.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchStorageV1CSINodeList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/storage.k8s.io/v1/watch/csinodes$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind CSINode. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the CSINode.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchStorageV1CSINode({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/storage.k8s.io/v1/watch/csinodes/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of CSIStorageCapacity.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1CSIStorageCapacityListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/csistoragecapacities$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of CSIStorageCapacity.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1NamespacedCSIStorageCapacityList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/namespaces/$namespace/csistoragecapacities$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind CSIStorageCapacity. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the CSIStorageCapacity.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1NamespacedCSIStorageCapacity({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/namespaces/$namespace/csistoragecapacities/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of StorageClass.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1StorageClassList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result =
        await _getJsonMap('/apis/storage.k8s.io/v1/watch/storageclasses$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind StorageClass. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the StorageClass.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent> watchStorageV1StorageClass({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/storageclasses/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of VolumeAttachment.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1VolumeAttachmentList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/volumeattachments$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind VolumeAttachment. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the VolumeAttachment.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1VolumeAttachment({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1/watch/volumeattachments/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get available resources.
  Future<apimachinery_pkg_apis_meta_v1.APIResourceList>
      getStorageV1beta1APIResources() async {
    final result = await _getJsonMap('/apis/storage.k8s.io/v1beta1/');
    return apimachinery_pkg_apis_meta_v1.APIResourceList.fromJson(result);
  }

  /// Delete collection of CSIStorageCapacity.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1beta1CollectionNamespacedCSIStorageCapacity({
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1beta1/namespaces/$namespace/csistoragecapacities$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Delete a CSIStorageCapacity.
  ///
  /// [name] Name of the CSIStorageCapacity.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  Future<apimachinery_pkg_apis_meta_v1.Status>
      deleteStorageV1beta1NamespacedCSIStorageCapacity({
    required String name,
    required String namespace,
    bool? pretty,
  }) async {
    final queryStrings = <String, Object>{};
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _deleteJsonMap(
        '/apis/storage.k8s.io/v1beta1/namespaces/$namespace/csistoragecapacities/$name$query');
    return apimachinery_pkg_apis_meta_v1.Status.fromJson(result);
  }

  /// Watch individual changes to a list of CSIStorageCapacity.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1beta1CSIStorageCapacityListForAllNamespaces({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1beta1/watch/csistoragecapacities$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch individual changes to a list of CSIStorageCapacity.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1beta1NamespacedCSIStorageCapacityList({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1beta1/watch/namespaces/$namespace/csistoragecapacities$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Watch changes to an object of kind CSIStorageCapacity. Filtered to a single item with the 'fieldSelector' parameter.
  ///
  /// [allowWatchBookmarks] AllowWatchBookmarks requests watch events with type "BOOKMARK". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
  ///
  /// [$continue] The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the "next key". This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  ///
  /// [fieldSelector] A selector to restrict the list of returned objects by their fields. Defaults to everything.
  ///
  /// [labelSelector] A selector to restrict the list of returned objects by their labels. Defaults to everything.
  ///
  /// [limit] Limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true. The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  ///
  /// [name] Name of the CSIStorageCapacity.
  ///
  /// [namespace] Object name and auth scope, such as for teams and projects.
  ///
  /// [pretty] If true, then the output is pretty printed.
  ///
  /// [resourceVersion] ResourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [resourceVersionMatch] ResourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details. Defaults to unset.
  ///
  /// [timeoutSeconds] Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
  ///
  /// [watch] Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  @Deprecated('Use the \'watch\' parameter with a list operation instead.')
  Future<apimachinery_pkg_apis_meta_v1.WatchEvent>
      watchStorageV1beta1NamespacedCSIStorageCapacity({
    bool? allowWatchBookmarks,
    String? $continue,
    String? fieldSelector,
    String? labelSelector,
    int? limit,
    required String name,
    required String namespace,
    bool? pretty,
    String? resourceVersion,
    String? resourceVersionMatch,
    int? timeoutSeconds,
    bool? watch,
  }) async {
    final queryStrings = <String, Object>{};
    if (allowWatchBookmarks != null) {
      queryStrings['allowWatchBookmarks'] = allowWatchBookmarks;
    }
    if ($continue != null) {
      queryStrings['continue'] = $continue;
    }
    if (fieldSelector != null) {
      queryStrings['fieldSelector'] = fieldSelector;
    }
    if (labelSelector != null) {
      queryStrings['labelSelector'] = labelSelector;
    }
    if (limit != null) {
      queryStrings['limit'] = limit;
    }
    if (pretty != null) {
      queryStrings['pretty'] = pretty;
    }
    if (resourceVersion != null) {
      queryStrings['resourceVersion'] = resourceVersion;
    }
    if (resourceVersionMatch != null) {
      queryStrings['resourceVersionMatch'] = resourceVersionMatch;
    }
    if (timeoutSeconds != null) {
      queryStrings['timeoutSeconds'] = timeoutSeconds;
    }
    if (watch != null) {
      queryStrings['watch'] = watch;
    }

    final query =
        queryStrings.isEmpty ? '' : '?${_joinQueryStrings(queryStrings)}';

    final result = await _getJsonMap(
        '/apis/storage.k8s.io/v1beta1/watch/namespaces/$namespace/csistoragecapacities/$name$query');
    return apimachinery_pkg_apis_meta_v1.WatchEvent.fromJson(result);
  }

  /// Get service account issuer OpenID JSON Web Key Set (contains public token verification keys).
  Future<String> getServiceAccountIssuerOpenIDKeyset() async {
    final result = await _getJsonString('/openid/v1/jwks/');
    return result;
  }

  /// Get the code version.
  Future<apimachinery_pkg_version.Info> getCodeVersion() async {
    final result = await _getJsonMap('/version/');
    return apimachinery_pkg_version.Info.fromJson(result);
  }
}

String _getPatchHeader(PatchType type) {
  switch (type) {
    case PatchType.jsonPatch:
      return 'application/json-patch+json; charset=utf-8';
    case PatchType.mergePatch:
      return 'application/merge-patch+json; charset=utf-8';
    case PatchType.strategicMergePatch:
      return 'application/strategic-merge-patch+json; charset=utf-8';
    case PatchType.applyPatch:
      return 'application/apply-patch+yaml; charset=utf-8';
  }
}
